
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000306c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  0800326c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800326c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099cd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001921  00000000  00000000  00029a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0002b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d50  00000000  00000000  0002c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a27e  00000000  00000000  00044180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089cd4  00000000  00000000  0004e3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d80d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002690  00000000  00000000  000d8124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003160 	.word	0x08003160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003160 	.word	0x08003160

0800014c <Send_CAN_Data>:
void Log_Debug(const char* error_msg) {
	HAL_UART_Transmit(&huart1, error_msg , sizeof(error_msg), 1000);
}

// max 4 bytes
void Send_CAN_Data(int value) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	; 0x38
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t value_bytes[sizeof(value)]; //nie dotykać
	sprintf((char* )value_bytes, "%d ", value);
 8000154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	4919      	ldr	r1, [pc, #100]	; (80001c0 <Send_CAN_Data+0x74>)
 800015c:	4618      	mov	r0, r3
 800015e:	f002 fb85 	bl	800286c <siprintf>

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_EXT;
 8000162:	2304      	movs	r3, #4
 8000164:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0x1C480480;
 8000166:	4b17      	ldr	r3, [pc, #92]	; (80001c4 <Send_CAN_Data+0x78>)
 8000168:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 800016a:	2300      	movs	r3, #0
 800016c:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.DLC = sizeof(value);
 800016e:	2304      	movs	r3, #4
 8000170:	62bb      	str	r3, [r7, #40]	; 0x28

	for (int i = 0; i < sizeof(value); i++) {
 8000172:	2300      	movs	r3, #0
 8000174:	637b      	str	r3, [r7, #52]	; 0x34
 8000176:	e00d      	b.n	8000194 <Send_CAN_Data+0x48>
		TxData[i] = value_bytes[i];
 8000178:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800017c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800017e:	4413      	add	r3, r2
 8000180:	7819      	ldrb	r1, [r3, #0]
 8000182:	f107 0210 	add.w	r2, r7, #16
 8000186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000188:	4413      	add	r3, r2
 800018a:	460a      	mov	r2, r1
 800018c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(value); i++) {
 800018e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000190:	3301      	adds	r3, #1
 8000192:	637b      	str	r3, [r7, #52]	; 0x34
 8000194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000196:	2b03      	cmp	r3, #3
 8000198:	d9ee      	bls.n	8000178 <Send_CAN_Data+0x2c>
	}

	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800019a:	f107 030c 	add.w	r3, r7, #12
 800019e:	f107 0210 	add.w	r2, r7, #16
 80001a2:	f107 0118 	add.w	r1, r7, #24
 80001a6:	4808      	ldr	r0, [pc, #32]	; (80001c8 <Send_CAN_Data+0x7c>)
 80001a8:	f001 f8aa 	bl	8001300 <HAL_CAN_AddTxMessage>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <Send_CAN_Data+0x6a>
		Error_Handler();
 80001b2:	f000 f95f 	bl	8000474 <Error_Handler>
	}
}
 80001b6:	bf00      	nop
 80001b8:	3738      	adds	r7, #56	; 0x38
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	08003178 	.word	0x08003178
 80001c4:	1c480480 	.word	0x1c480480
 80001c8:	200000bc 	.word	0x200000bc

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fae9 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f83f 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f929 	bl	8000430 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001de:	f000 f88b 	bl	80002f8 <MX_ADC1_Init>
  MX_CAN_Init();
 80001e2:	f000 f8c7 	bl	8000374 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80001e6:	f000 f8f9 	bl	80003dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t measured_value;
  uint32_t last_sent = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(1000);
 80001ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f2:	f000 fb3b 	bl	800086c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80001f6:	4815      	ldr	r0, [pc, #84]	; (800024c <main+0x80>)
 80001f8:	f000 fc34 	bl	8000a64 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80001fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000200:	4812      	ldr	r0, [pc, #72]	; (800024c <main+0x80>)
 8000202:	f000 fcdd 	bl	8000bc0 <HAL_ADC_PollForConversion>
	  measured_value = HAL_ADC_GetValue(&hadc1);
 8000206:	4811      	ldr	r0, [pc, #68]	; (800024c <main+0x80>)
 8000208:	f000 fde0 	bl	8000dcc <HAL_ADC_GetValue>
 800020c:	60b8      	str	r0, [r7, #8]

	  uint8_t measured_value_bytes[sizeof(measured_value)]; //nie dotykać
	  sprintf((char*) measured_value_bytes ,"%lu", measured_value);
 800020e:	463b      	mov	r3, r7
 8000210:	68ba      	ldr	r2, [r7, #8]
 8000212:	490f      	ldr	r1, [pc, #60]	; (8000250 <main+0x84>)
 8000214:	4618      	mov	r0, r3
 8000216:	f002 fb29 	bl	800286c <siprintf>
	  HAL_UART_Transmit(&huart1, measured_value_bytes, sizeof(measured_value_bytes), 1000);
 800021a:	4639      	mov	r1, r7
 800021c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000220:	2204      	movs	r2, #4
 8000222:	480c      	ldr	r0, [pc, #48]	; (8000254 <main+0x88>)
 8000224:	f002 f970 	bl	8002508 <HAL_UART_Transmit>

	  uint32_t time = HAL_GetTick();
 8000228:	f000 fb16 	bl	8000858 <HAL_GetTick>
 800022c:	6078      	str	r0, [r7, #4]

	  if (time - last_sent > 5000) {
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	1ad3      	subs	r3, r2, r3
 8000234:	f241 3288 	movw	r2, #5000	; 0x1388
 8000238:	4293      	cmp	r3, r2
 800023a:	d9d8      	bls.n	80001ee <main+0x22>
		  Send_CAN_Data(measured_value);
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff84 	bl	800014c <Send_CAN_Data>
		  last_sent = time;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	60fb      	str	r3, [r7, #12]
  {
 8000248:	e7d1      	b.n	80001ee <main+0x22>
 800024a:	bf00      	nop
 800024c:	2000008c 	.word	0x2000008c
 8000250:	0800317c 	.word	0x0800317c
 8000254:	200000e4 	.word	0x200000e4

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b094      	sub	sp, #80	; 0x50
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 faf8 	bl	800285c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000288:	2302      	movs	r3, #2
 800028a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	2310      	movs	r3, #16
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000294:	2300      	movs	r3, #0
 8000296:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029c:	4618      	mov	r0, r3
 800029e:	f001 fb67 	bl	8001970 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002a8:	f000 f8e4 	bl	8000474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b0:	2300      	movs	r3, #0
 80002b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fdd4 	bl	8001e74 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002d2:	f000 f8cf 	bl	8000474 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002d6:	2302      	movs	r3, #2
 80002d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 ff55 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002ec:	f000 f8c2 	bl	8000474 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3750      	adds	r7, #80	; 0x50
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_ADC1_Init+0x74>)
 800030a:	4a19      	ldr	r2, [pc, #100]	; (8000370 <MX_ADC1_Init+0x78>)
 800030c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <MX_ADC1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000314:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_ADC1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <MX_ADC1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000320:	4b12      	ldr	r3, [pc, #72]	; (800036c <MX_ADC1_Init+0x74>)
 8000322:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000326:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_ADC1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <MX_ADC1_Init+0x74>)
 8000330:	2201      	movs	r2, #1
 8000332:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <MX_ADC1_Init+0x74>)
 8000336:	f000 fabd 	bl	80008b4 <HAL_ADC_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000340:	f000 f898 	bl	8000474 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000344:	2300      	movs	r3, #0
 8000346:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000348:	2301      	movs	r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4619      	mov	r1, r3
 8000354:	4805      	ldr	r0, [pc, #20]	; (800036c <MX_ADC1_Init+0x74>)
 8000356:	f000 fd45 	bl	8000de4 <HAL_ADC_ConfigChannel>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000360:	f000 f888 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	2000008c 	.word	0x2000008c
 8000370:	40012400 	.word	0x40012400

08000374 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MX_CAN_Init+0x60>)
 800037a:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <MX_CAN_Init+0x64>)
 800037c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_CAN_Init+0x60>)
 8000380:	2210      	movs	r2, #16
 8000382:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000384:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <MX_CAN_Init+0x60>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_CAN_Init+0x60>)
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <MX_CAN_Init+0x60>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_CAN_Init+0x60>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <MX_CAN_Init+0x60>)
 800039e:	2200      	movs	r2, #0
 80003a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_CAN_Init+0x60>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <MX_CAN_Init+0x60>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_CAN_Init+0x60>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <MX_CAN_Init+0x60>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_CAN_Init+0x60>)
 80003bc:	2200      	movs	r2, #0
 80003be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_CAN_Init+0x60>)
 80003c2:	f000 fea2 	bl	800110a <HAL_CAN_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80003cc:	f000 f852 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200000bc 	.word	0x200000bc
 80003d8:	40006400 	.word	0x40006400

080003dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	; (800042c <MX_USART1_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_USART1_UART_Init+0x4c>)
 8000414:	f002 f828 	bl	8002468 <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f829 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	200000e4 	.word	0x200000e4
 800042c:	40013800 	.word	0x40013800

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_GPIO_Init+0x40>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <MX_GPIO_Init+0x40>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_GPIO_Init+0x40>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_GPIO_Init+0x40>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a07      	ldr	r2, [pc, #28]	; (8000470 <MX_GPIO_Init+0x40>)
 8000454:	f043 0308 	orr.w	r3, r3, #8
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <MX_GPIO_Init+0x40>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0308 	and.w	r3, r3, #8
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	e7fe      	b.n	800047c <Error_Handler+0x8>
	...

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <HAL_MspInit+0x40>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <HAL_MspInit+0x40>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <HAL_MspInit+0x40>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <HAL_MspInit+0x40>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <HAL_MspInit+0x40>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <HAL_MspInit+0x40>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000

080004c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a14      	ldr	r2, [pc, #80]	; (8000530 <HAL_ADC_MspInit+0x6c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d121      	bne.n	8000528 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <HAL_ADC_MspInit+0x70>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a12      	ldr	r2, [pc, #72]	; (8000534 <HAL_ADC_MspInit+0x70>)
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <HAL_ADC_MspInit+0x70>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <HAL_ADC_MspInit+0x70>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <HAL_ADC_MspInit+0x70>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_ADC_MspInit+0x70>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000514:	2301      	movs	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000518:	2303      	movs	r3, #3
 800051a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <HAL_ADC_MspInit+0x74>)
 8000524:	f001 f8a0 	bl	8001668 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40012400 	.word	0x40012400
 8000534:	40021000 	.word	0x40021000
 8000538:	40010800 	.word	0x40010800

0800053c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a25      	ldr	r2, [pc, #148]	; (80005ec <HAL_CAN_MspInit+0xb0>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d143      	bne.n	80005e4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <HAL_CAN_MspInit+0xb4>)
 800055e:	69db      	ldr	r3, [r3, #28]
 8000560:	4a23      	ldr	r2, [pc, #140]	; (80005f0 <HAL_CAN_MspInit+0xb4>)
 8000562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000566:	61d3      	str	r3, [r2, #28]
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <HAL_CAN_MspInit+0xb4>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <HAL_CAN_MspInit+0xb4>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <HAL_CAN_MspInit+0xb4>)
 800057a:	f043 0308 	orr.w	r3, r3, #8
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <HAL_CAN_MspInit+0xb4>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0308 	and.w	r3, r3, #8
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800058c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4814      	ldr	r0, [pc, #80]	; (80005f4 <HAL_CAN_MspInit+0xb8>)
 80005a2:	f001 f861 	bl	8001668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <HAL_CAN_MspInit+0xb8>)
 80005bc:	f001 f854 	bl	8001668 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <HAL_CAN_MspInit+0xbc>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
 80005c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
 80005d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
 80005de:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <HAL_CAN_MspInit+0xbc>)
 80005e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3728      	adds	r7, #40	; 0x28
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40006400 	.word	0x40006400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010c00 	.word	0x40010c00
 80005f8:	40010000 	.word	0x40010000

080005fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <HAL_UART_MspInit+0x8c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d131      	bne.n	8000680 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_UART_MspInit+0x90>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a1a      	ldr	r2, [pc, #104]	; (800068c <HAL_UART_MspInit+0x90>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_UART_MspInit+0x90>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_UART_MspInit+0x90>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <HAL_UART_MspInit+0x90>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_UART_MspInit+0x90>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800064c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	2302      	movs	r3, #2
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <HAL_UART_MspInit+0x94>)
 8000662:	f001 f801 	bl	8001668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <HAL_UART_MspInit+0x94>)
 800067c:	f000 fff4 	bl	8001668 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40013800 	.word	0x40013800
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006da:	f000 f8ab 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <_sbrk+0x5c>)
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <_sbrk+0x60>)
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d102      	bne.n	8000706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <_sbrk+0x64>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <_sbrk+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	429a      	cmp	r2, r3
 8000712:	d207      	bcs.n	8000724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000714:	f002 f878 	bl	8002808 <__errno>
 8000718:	4603      	mov	r3, r0
 800071a:	220c      	movs	r2, #12
 800071c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	e009      	b.n	8000738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <_sbrk+0x64>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <_sbrk+0x64>)
 8000734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20005000 	.word	0x20005000
 8000744:	00000400 	.word	0x00000400
 8000748:	2000012c 	.word	0x2000012c
 800074c:	20000148 	.word	0x20000148

08000750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800075c:	f7ff fff8 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000762:	490c      	ldr	r1, [pc, #48]	; (8000794 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000764:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000778:	4c09      	ldr	r4, [pc, #36]	; (80007a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000786:	f002 f845 	bl	8002814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078a:	f7ff fd1f 	bl	80001cc <main>
  bx lr
 800078e:	4770      	bx	lr
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000798:	080031fc 	.word	0x080031fc
  ldr r2, =_sbss
 800079c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007a0:	20000144 	.word	0x20000144

080007a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_2_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_Init+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_Init+0x28>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 ff21 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	200f      	movs	r0, #15
 80007c0:	f000 f808 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff fe5c 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x54>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x58>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 ff2b 	bl	800164e <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00e      	b.n	8000820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d80a      	bhi.n	800081e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295
 8000810:	f000 ff01 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <HAL_InitTick+0x5c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x1c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x20>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a03      	ldr	r2, [pc, #12]	; (8000854 <HAL_IncTick+0x20>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	20000008 	.word	0x20000008
 8000854:	20000130 	.word	0x20000130

08000858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <HAL_GetTick+0x10>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000130 	.word	0x20000130

0800086c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff fff0 	bl	8000858 <HAL_GetTick>
 8000878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000884:	d005      	beq.n	8000892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_Delay+0x44>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4413      	add	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000892:	bf00      	nop
 8000894:	f7ff ffe0 	bl	8000858 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d8f7      	bhi.n	8000894 <HAL_Delay+0x28>
  {
  }
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008

080008b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d101      	bne.n	80008d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e0be      	b.n	8000a54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff fde6 	bl	80004c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 fbc5 	bl	8001088 <ADC_ConversionStop_Disable>
 80008fe:	4603      	mov	r3, r0
 8000900:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	2b00      	cmp	r3, #0
 800090c:	f040 8099 	bne.w	8000a42 <HAL_ADC_Init+0x18e>
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	2b00      	cmp	r3, #0
 8000914:	f040 8095 	bne.w	8000a42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000920:	f023 0302 	bic.w	r3, r3, #2
 8000924:	f043 0202 	orr.w	r2, r3, #2
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000934:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7b1b      	ldrb	r3, [r3, #12]
 800093a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800093c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4313      	orrs	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800094c:	d003      	beq.n	8000956 <HAL_ADC_Init+0xa2>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d102      	bne.n	800095c <HAL_ADC_Init+0xa8>
 8000956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095a:	e000      	b.n	800095e <HAL_ADC_Init+0xaa>
 800095c:	2300      	movs	r3, #0
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	7d1b      	ldrb	r3, [r3, #20]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d119      	bne.n	80009a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7b1b      	ldrb	r3, [r3, #12]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d109      	bne.n	8000988 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	3b01      	subs	r3, #1
 800097a:	035a      	lsls	r2, r3, #13
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	e00b      	b.n	80009a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098c:	f043 0220 	orr.w	r2, r3, #32
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	f043 0201 	orr.w	r2, r3, #1
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	430a      	orrs	r2, r1
 80009b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <HAL_ADC_Init+0x1a8>)
 80009bc:	4013      	ands	r3, r2
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	6812      	ldr	r2, [r2, #0]
 80009c2:	68b9      	ldr	r1, [r7, #8]
 80009c4:	430b      	orrs	r3, r1
 80009c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009d0:	d003      	beq.n	80009da <HAL_ADC_Init+0x126>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d104      	bne.n	80009e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	3b01      	subs	r3, #1
 80009e0:	051b      	lsls	r3, r3, #20
 80009e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_ADC_Init+0x1ac>)
 8000a00:	4013      	ands	r3, r2
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d10b      	bne.n	8000a20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	f023 0303 	bic.w	r3, r3, #3
 8000a16:	f043 0201 	orr.w	r2, r3, #1
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a1e:	e018      	b.n	8000a52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	f023 0312 	bic.w	r3, r3, #18
 8000a28:	f043 0210 	orr.w	r2, r3, #16
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a34:	f043 0201 	orr.w	r2, r3, #1
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a40:	e007      	b.n	8000a52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a46:	f043 0210 	orr.w	r2, r3, #16
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a60:	ff1f0efe 	.word	0xff1f0efe

08000a64 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d101      	bne.n	8000a7e <HAL_ADC_Start+0x1a>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e098      	b.n	8000bb0 <HAL_ADC_Start+0x14c>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2201      	movs	r2, #1
 8000a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 faa4 	bl	8000fd4 <ADC_Enable>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f040 8087 	bne.w	8000ba6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aa0:	f023 0301 	bic.w	r3, r3, #1
 8000aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a41      	ldr	r2, [pc, #260]	; (8000bb8 <HAL_ADC_Start+0x154>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d105      	bne.n	8000ac2 <HAL_ADC_Start+0x5e>
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <HAL_ADC_Start+0x158>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d115      	bne.n	8000aee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d026      	beq.n	8000b2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ae4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aec:	e01d      	b.n	8000b2a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a2f      	ldr	r2, [pc, #188]	; (8000bbc <HAL_ADC_Start+0x158>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d004      	beq.n	8000b0e <HAL_ADC_Start+0xaa>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a2b      	ldr	r2, [pc, #172]	; (8000bb8 <HAL_ADC_Start+0x154>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10d      	bne.n	8000b2a <HAL_ADC_Start+0xc6>
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <HAL_ADC_Start+0x158>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	f023 0206 	bic.w	r2, r3, #6
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b42:	e002      	b.n	8000b4a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f06f 0202 	mvn.w	r2, #2
 8000b5a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b66:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b6a:	d113      	bne.n	8000b94 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b70:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <HAL_ADC_Start+0x154>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d105      	bne.n	8000b82 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_ADC_Start+0x158>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d108      	bne.n	8000b94 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	e00c      	b.n	8000bae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	e003      	b.n	8000bae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40012800 	.word	0x40012800
 8000bbc:	40012400 	.word	0x40012400

08000bc0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000bd6:	f7ff fe3f 	bl	8000858 <HAL_GetTick>
 8000bda:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00b      	beq.n	8000c02 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	f043 0220 	orr.w	r2, r3, #32
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e0d3      	b.n	8000daa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d131      	bne.n	8000c74 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d12a      	bne.n	8000c74 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c1e:	e021      	b.n	8000c64 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c26:	d01d      	beq.n	8000c64 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d007      	beq.n	8000c3e <HAL_ADC_PollForConversion+0x7e>
 8000c2e:	f7ff fe13 	bl	8000858 <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d212      	bcs.n	8000c64 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10b      	bne.n	8000c64 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f043 0204 	orr.w	r2, r3, #4
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e0a2      	b.n	8000daa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0d6      	beq.n	8000c20 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c72:	e070      	b.n	8000d56 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c74:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <HAL_ADC_PollForConversion+0x1f4>)
 8000c76:	681c      	ldr	r4, [r3, #0]
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f001 fb3f 	bl	80022fc <HAL_RCCEx_GetPeriphCLKFreq>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6919      	ldr	r1, [r3, #16]
 8000c8a:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <HAL_ADC_PollForConversion+0x1f8>)
 8000c8c:	400b      	ands	r3, r1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d118      	bne.n	8000cc4 <HAL_ADC_PollForConversion+0x104>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68d9      	ldr	r1, [r3, #12]
 8000c98:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_ADC_PollForConversion+0x1fc>)
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d111      	bne.n	8000cc4 <HAL_ADC_PollForConversion+0x104>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6919      	ldr	r1, [r3, #16]
 8000ca6:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HAL_ADC_PollForConversion+0x200>)
 8000ca8:	400b      	ands	r3, r1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d108      	bne.n	8000cc0 <HAL_ADC_PollForConversion+0x100>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68d9      	ldr	r1, [r3, #12]
 8000cb4:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <HAL_ADC_PollForConversion+0x204>)
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <HAL_ADC_PollForConversion+0x100>
 8000cbc:	2314      	movs	r3, #20
 8000cbe:	e020      	b.n	8000d02 <HAL_ADC_PollForConversion+0x142>
 8000cc0:	2329      	movs	r3, #41	; 0x29
 8000cc2:	e01e      	b.n	8000d02 <HAL_ADC_PollForConversion+0x142>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6919      	ldr	r1, [r3, #16]
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <HAL_ADC_PollForConversion+0x200>)
 8000ccc:	400b      	ands	r3, r1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d106      	bne.n	8000ce0 <HAL_ADC_PollForConversion+0x120>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68d9      	ldr	r1, [r3, #12]
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <HAL_ADC_PollForConversion+0x204>)
 8000cda:	400b      	ands	r3, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00d      	beq.n	8000cfc <HAL_ADC_PollForConversion+0x13c>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6919      	ldr	r1, [r3, #16]
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <HAL_ADC_PollForConversion+0x208>)
 8000ce8:	400b      	ands	r3, r1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d108      	bne.n	8000d00 <HAL_ADC_PollForConversion+0x140>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68d9      	ldr	r1, [r3, #12]
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <HAL_ADC_PollForConversion+0x208>)
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <HAL_ADC_PollForConversion+0x140>
 8000cfc:	2354      	movs	r3, #84	; 0x54
 8000cfe:	e000      	b.n	8000d02 <HAL_ADC_PollForConversion+0x142>
 8000d00:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d08:	e021      	b.n	8000d4e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d01a      	beq.n	8000d48 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d007      	beq.n	8000d28 <HAL_ADC_PollForConversion+0x168>
 8000d18:	f7ff fd9e 	bl	8000858 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d20f      	bcs.n	8000d48 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d90b      	bls.n	8000d48 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	f043 0204 	orr.w	r2, r3, #4
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e030      	b.n	8000daa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d8d9      	bhi.n	8000d0a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f06f 0212 	mvn.w	r2, #18
 8000d5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d7a:	d115      	bne.n	8000da8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d111      	bne.n	8000da8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d105      	bne.n	8000da8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	f043 0201 	orr.w	r2, r3, #1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	371c      	adds	r7, #28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000000 	.word	0x20000000
 8000db8:	24924924 	.word	0x24924924
 8000dbc:	00924924 	.word	0x00924924
 8000dc0:	12492492 	.word	0x12492492
 8000dc4:	00492492 	.word	0x00492492
 8000dc8:	00249249 	.word	0x00249249

08000dcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d101      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x20>
 8000e00:	2302      	movs	r3, #2
 8000e02:	e0dc      	b.n	8000fbe <HAL_ADC_ConfigChannel+0x1da>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	d81c      	bhi.n	8000e4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	3b05      	subs	r3, #5
 8000e26:	221f      	movs	r2, #31
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4019      	ands	r1, r3
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b05      	subs	r3, #5
 8000e40:	fa00 f203 	lsl.w	r2, r0, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4c:	e03c      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b0c      	cmp	r3, #12
 8000e54:	d81c      	bhi.n	8000e90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	3b23      	subs	r3, #35	; 0x23
 8000e68:	221f      	movs	r2, #31
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	4019      	ands	r1, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	3b23      	subs	r3, #35	; 0x23
 8000e82:	fa00 f203 	lsl.w	r2, r0, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e8e:	e01b      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3b41      	subs	r3, #65	; 0x41
 8000ea2:	221f      	movs	r2, #31
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4019      	ands	r1, r3
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	3b41      	subs	r3, #65	; 0x41
 8000ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b09      	cmp	r3, #9
 8000ece:	d91c      	bls.n	8000f0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68d9      	ldr	r1, [r3, #12]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	3b1e      	subs	r3, #30
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4019      	ands	r1, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6898      	ldr	r0, [r3, #8]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	3b1e      	subs	r3, #30
 8000efc:	fa00 f203 	lsl.w	r2, r0, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	e019      	b.n	8000f3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6919      	ldr	r1, [r3, #16]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4019      	ands	r1, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6898      	ldr	r0, [r3, #8]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	fa00 f203 	lsl.w	r2, r0, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b10      	cmp	r3, #16
 8000f44:	d003      	beq.n	8000f4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f4a:	2b11      	cmp	r3, #17
 8000f4c:	d132      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d125      	bne.n	8000fa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d126      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b10      	cmp	r3, #16
 8000f7c:	d11a      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <HAL_ADC_ConfigChannel+0x1e8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	0c9a      	lsrs	r2, r3, #18
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f94:	e002      	b.n	8000f9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f9      	bne.n	8000f96 <HAL_ADC_ConfigChannel+0x1b2>
 8000fa2:	e007      	b.n	8000fb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa8:	f043 0220 	orr.w	r2, r3, #32
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40012400 	.word	0x40012400
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	431bde83 	.word	0x431bde83

08000fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d040      	beq.n	8001074 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 0201 	orr.w	r2, r2, #1
 8001000:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <ADC_Enable+0xac>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <ADC_Enable+0xb0>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	0c9b      	lsrs	r3, r3, #18
 800100e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001010:	e002      	b.n	8001018 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3b01      	subs	r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f9      	bne.n	8001012 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800101e:	f7ff fc1b 	bl	8000858 <HAL_GetTick>
 8001022:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001024:	e01f      	b.n	8001066 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001026:	f7ff fc17 	bl	8000858 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d918      	bls.n	8001066 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b01      	cmp	r3, #1
 8001040:	d011      	beq.n	8001066 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	f043 0210 	orr.w	r2, r3, #16
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001052:	f043 0201 	orr.w	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e007      	b.n	8001076 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	d1d8      	bne.n	8001026 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000000 	.word	0x20000000
 8001084:	431bde83 	.word	0x431bde83

08001088 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d12e      	bne.n	8001100 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010b2:	f7ff fbd1 	bl	8000858 <HAL_GetTick>
 80010b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010b8:	e01b      	b.n	80010f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ba:	f7ff fbcd 	bl	8000858 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d914      	bls.n	80010f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10d      	bne.n	80010f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	f043 0210 	orr.w	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e007      	b.n	8001102 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d0dc      	beq.n	80010ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0ed      	b.n	80012f8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff fa07 	bl	800053c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0201 	orr.w	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113e:	f7ff fb8b 	bl	8000858 <HAL_GetTick>
 8001142:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001144:	e012      	b.n	800116c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001146:	f7ff fb87 	bl	8000858 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b0a      	cmp	r3, #10
 8001152:	d90b      	bls.n	800116c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2205      	movs	r2, #5
 8001164:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0c5      	b.n	80012f8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0e5      	beq.n	8001146 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0202 	bic.w	r2, r2, #2
 8001188:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800118a:	f7ff fb65 	bl	8000858 <HAL_GetTick>
 800118e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001190:	e012      	b.n	80011b8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001192:	f7ff fb61 	bl	8000858 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b0a      	cmp	r3, #10
 800119e:	d90b      	bls.n	80011b8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2205      	movs	r2, #5
 80011b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e09f      	b.n	80012f8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1e5      	bne.n	8001192 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7e1b      	ldrb	r3, [r3, #24]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d108      	bne.n	80011e0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e007      	b.n	80011f0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7e5b      	ldrb	r3, [r3, #25]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e007      	b.n	800121a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e9b      	ldrb	r3, [r3, #26]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e007      	b.n	8001244 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0220 	bic.w	r2, r2, #32
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7edb      	ldrb	r3, [r3, #27]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0210 	bic.w	r2, r2, #16
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e007      	b.n	800126e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0210 	orr.w	r2, r2, #16
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7f1b      	ldrb	r3, [r3, #28]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0208 	orr.w	r2, r2, #8
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e007      	b.n	8001298 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0208 	bic.w	r2, r2, #8
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7f5b      	ldrb	r3, [r3, #29]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0204 	orr.w	r2, r2, #4
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0204 	bic.w	r2, r2, #4
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	ea42 0103 	orr.w	r1, r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	1e5a      	subs	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001314:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d003      	beq.n	800132c <HAL_CAN_AddTxMessage+0x2c>
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	2b02      	cmp	r3, #2
 8001328:	f040 80ad 	bne.w	8001486 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10a      	bne.n	800134c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800133c:	2b00      	cmp	r3, #0
 800133e:	d105      	bne.n	800134c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8095 	beq.w	8001476 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	0e1b      	lsrs	r3, r3, #24
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001356:	2201      	movs	r2, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10d      	bne.n	8001384 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	6809      	ldr	r1, [r1, #0]
 8001376:	431a      	orrs	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3318      	adds	r3, #24
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	440b      	add	r3, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e00f      	b.n	80013a4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800138e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001398:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3318      	adds	r3, #24
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	440b      	add	r3, r1
 80013a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3318      	adds	r3, #24
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	440b      	add	r3, r1
 80013b4:	3304      	adds	r3, #4
 80013b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	7d1b      	ldrb	r3, [r3, #20]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d111      	bne.n	80013e4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3318      	adds	r3, #24
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4413      	add	r3, r2
 80013cc:	3304      	adds	r3, #4
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	6811      	ldr	r1, [r2, #0]
 80013d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3318      	adds	r3, #24
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	440b      	add	r3, r1
 80013e0:	3304      	adds	r3, #4
 80013e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3307      	adds	r3, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	061a      	lsls	r2, r3, #24
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3306      	adds	r3, #6
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3305      	adds	r3, #5
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	4313      	orrs	r3, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	3204      	adds	r2, #4
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	4610      	mov	r0, r2
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	6811      	ldr	r1, [r2, #0]
 800140c:	ea43 0200 	orr.w	r2, r3, r0
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	440b      	add	r3, r1
 8001416:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800141a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3303      	adds	r3, #3
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	061a      	lsls	r2, r3, #24
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3302      	adds	r3, #2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	041b      	lsls	r3, r3, #16
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3301      	adds	r3, #1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	4313      	orrs	r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	7812      	ldrb	r2, [r2, #0]
 800143c:	4610      	mov	r0, r2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	6811      	ldr	r1, [r2, #0]
 8001442:	ea43 0200 	orr.w	r2, r3, r0
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	440b      	add	r3, r1
 800144c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001450:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3318      	adds	r3, #24
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	6811      	ldr	r1, [r2, #0]
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3318      	adds	r3, #24
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	440b      	add	r3, r1
 8001470:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e00e      	b.n	8001494 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e006      	b.n	8001494 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
  }
}
 8001494:	4618      	mov	r0, r3
 8001496:	3724      	adds	r7, #36	; 0x24
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
	...

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff90 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff49 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff5e 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff90 	bl	8001558 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5f 	bl	8001504 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffb0 	bl	80015bc <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e169      	b.n	8001950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800167c:	2201      	movs	r2, #1
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8158 	bne.w	800194a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a9a      	ldr	r2, [pc, #616]	; (8001908 <HAL_GPIO_Init+0x2a0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d05e      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016a4:	4a98      	ldr	r2, [pc, #608]	; (8001908 <HAL_GPIO_Init+0x2a0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d875      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016aa:	4a98      	ldr	r2, [pc, #608]	; (800190c <HAL_GPIO_Init+0x2a4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d058      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016b0:	4a96      	ldr	r2, [pc, #600]	; (800190c <HAL_GPIO_Init+0x2a4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d86f      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016b6:	4a96      	ldr	r2, [pc, #600]	; (8001910 <HAL_GPIO_Init+0x2a8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d052      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016bc:	4a94      	ldr	r2, [pc, #592]	; (8001910 <HAL_GPIO_Init+0x2a8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d869      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016c2:	4a94      	ldr	r2, [pc, #592]	; (8001914 <HAL_GPIO_Init+0x2ac>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d04c      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016c8:	4a92      	ldr	r2, [pc, #584]	; (8001914 <HAL_GPIO_Init+0x2ac>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d863      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016ce:	4a92      	ldr	r2, [pc, #584]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d046      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016d4:	4a90      	ldr	r2, [pc, #576]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d85d      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d82a      	bhi.n	8001734 <HAL_GPIO_Init+0xcc>
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d859      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <HAL_GPIO_Init+0x80>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001763 	.word	0x08001763
 80016ec:	0800173d 	.word	0x0800173d
 80016f0:	0800174f 	.word	0x0800174f
 80016f4:	08001791 	.word	0x08001791
 80016f8:	08001797 	.word	0x08001797
 80016fc:	08001797 	.word	0x08001797
 8001700:	08001797 	.word	0x08001797
 8001704:	08001797 	.word	0x08001797
 8001708:	08001797 	.word	0x08001797
 800170c:	08001797 	.word	0x08001797
 8001710:	08001797 	.word	0x08001797
 8001714:	08001797 	.word	0x08001797
 8001718:	08001797 	.word	0x08001797
 800171c:	08001797 	.word	0x08001797
 8001720:	08001797 	.word	0x08001797
 8001724:	08001797 	.word	0x08001797
 8001728:	08001797 	.word	0x08001797
 800172c:	08001745 	.word	0x08001745
 8001730:	08001759 	.word	0x08001759
 8001734:	4a79      	ldr	r2, [pc, #484]	; (800191c <HAL_GPIO_Init+0x2b4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173a:	e02c      	b.n	8001796 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e029      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	3304      	adds	r3, #4
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e024      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	3308      	adds	r3, #8
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e01f      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	330c      	adds	r3, #12
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e01a      	b.n	8001798 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800176a:	2304      	movs	r3, #4
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e013      	b.n	8001798 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001778:	2308      	movs	r3, #8
 800177a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	611a      	str	r2, [r3, #16]
          break;
 8001782:	e009      	b.n	8001798 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	615a      	str	r2, [r3, #20]
          break;
 800178e:	e003      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x130>
          break;
 8001796:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d801      	bhi.n	80017a2 <HAL_GPIO_Init+0x13a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	e001      	b.n	80017a6 <HAL_GPIO_Init+0x13e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3304      	adds	r3, #4
 80017a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d802      	bhi.n	80017b4 <HAL_GPIO_Init+0x14c>
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x152>
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3b08      	subs	r3, #8
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	210f      	movs	r1, #15
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	401a      	ands	r2, r3
 80017cc:	6a39      	ldr	r1, [r7, #32]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80b1 	beq.w	800194a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e8:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_GPIO_Init+0x2b8>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_GPIO_Init+0x2b8>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_GPIO_Init+0x2b8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001800:	4a48      	ldr	r2, [pc, #288]	; (8001924 <HAL_GPIO_Init+0x2bc>)
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a40      	ldr	r2, [pc, #256]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d013      	beq.n	8001854 <HAL_GPIO_Init+0x1ec>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3f      	ldr	r2, [pc, #252]	; (800192c <HAL_GPIO_Init+0x2c4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00d      	beq.n	8001850 <HAL_GPIO_Init+0x1e8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3e      	ldr	r2, [pc, #248]	; (8001930 <HAL_GPIO_Init+0x2c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <HAL_GPIO_Init+0x1e4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3d      	ldr	r2, [pc, #244]	; (8001934 <HAL_GPIO_Init+0x2cc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_GPIO_Init+0x1e0>
 8001844:	2303      	movs	r3, #3
 8001846:	e006      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 8001848:	2304      	movs	r3, #4
 800184a:	e004      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 800184c:	2302      	movs	r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 8001854:	2300      	movs	r3, #0
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	f002 0203 	and.w	r2, r2, #3
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	4093      	lsls	r3, r2
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001866:	492f      	ldr	r1, [pc, #188]	; (8001924 <HAL_GPIO_Init+0x2bc>)
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	492c      	ldr	r1, [pc, #176]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	43db      	mvns	r3, r3
 8001896:	4928      	ldr	r1, [pc, #160]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001898:	4013      	ands	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4922      	ldr	r1, [pc, #136]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	491e      	ldr	r1, [pc, #120]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4918      	ldr	r1, [pc, #96]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4914      	ldr	r1, [pc, #80]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d021      	beq.n	800193c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e021      	b.n	800194a <HAL_GPIO_Init+0x2e2>
 8001906:	bf00      	nop
 8001908:	10320000 	.word	0x10320000
 800190c:	10310000 	.word	0x10310000
 8001910:	10220000 	.word	0x10220000
 8001914:	10210000 	.word	0x10210000
 8001918:	10120000 	.word	0x10120000
 800191c:	10110000 	.word	0x10110000
 8001920:	40021000 	.word	0x40021000
 8001924:	40010000 	.word	0x40010000
 8001928:	40010800 	.word	0x40010800
 800192c:	40010c00 	.word	0x40010c00
 8001930:	40011000 	.word	0x40011000
 8001934:	40011400 	.word	0x40011400
 8001938:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_GPIO_Init+0x304>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	43db      	mvns	r3, r3
 8001944:	4909      	ldr	r1, [pc, #36]	; (800196c <HAL_GPIO_Init+0x304>)
 8001946:	4013      	ands	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	f47f ae8e 	bne.w	800167c <HAL_GPIO_Init+0x14>
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	372c      	adds	r7, #44	; 0x2c
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e272      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8087 	beq.w	8001a9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001990:	4b92      	ldr	r3, [pc, #584]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b04      	cmp	r3, #4
 800199a:	d00c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800199c:	4b8f      	ldr	r3, [pc, #572]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d112      	bne.n	80019ce <HAL_RCC_OscConfig+0x5e>
 80019a8:	4b8c      	ldr	r3, [pc, #560]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b4:	d10b      	bne.n	80019ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b6:	4b89      	ldr	r3, [pc, #548]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d06c      	beq.n	8001a9c <HAL_RCC_OscConfig+0x12c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d168      	bne.n	8001a9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e24c      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x76>
 80019d8:	4b80      	ldr	r3, [pc, #512]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a7f      	ldr	r2, [pc, #508]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e02e      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x98>
 80019ee:	4b7b      	ldr	r3, [pc, #492]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7a      	ldr	r2, [pc, #488]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b78      	ldr	r3, [pc, #480]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a77      	ldr	r2, [pc, #476]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e01d      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0xbc>
 8001a12:	4b72      	ldr	r3, [pc, #456]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a71      	ldr	r2, [pc, #452]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b6f      	ldr	r3, [pc, #444]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a6e      	ldr	r2, [pc, #440]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0xd4>
 8001a2c:	4b6b      	ldr	r3, [pc, #428]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6a      	ldr	r2, [pc, #424]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b68      	ldr	r3, [pc, #416]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a67      	ldr	r2, [pc, #412]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7fe ff04 	bl	8000858 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7fe ff00 	bl	8000858 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e200      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0xe4>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7fe fef0 	bl	8000858 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7fe feec 	bl	8000858 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1ec      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x10c>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d063      	beq.n	8001b72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aaa:	4b4c      	ldr	r3, [pc, #304]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ab6:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d11c      	bne.n	8001afc <HAL_RCC_OscConfig+0x18c>
 8001ac2:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x176>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1c0      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4939      	ldr	r1, [pc, #228]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	e03a      	b.n	8001b72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7fe fea5 	bl	8000858 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7fe fea1 	bl	8000858 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1a1      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4927      	ldr	r1, [pc, #156]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7fe fe84 	bl	8000858 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7fe fe80 	bl	8000858 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e180      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d03a      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d019      	beq.n	8001bba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_RCC_OscConfig+0x274>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8c:	f7fe fe64 	bl	8000858 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b94:	f7fe fe60 	bl	8000858 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e160      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f000 face 	bl	8002154 <RCC_Delay>
 8001bb8:	e01c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7fe fe4a 	bl	8000858 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc6:	e00f      	b.n	8001be8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7fe fe46 	bl	8000858 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d908      	bls.n	8001be8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e146      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	42420000 	.word	0x42420000
 8001be4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	4b92      	ldr	r3, [pc, #584]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e9      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80a6 	beq.w	8001d4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c06:	4b8b      	ldr	r3, [pc, #556]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10d      	bne.n	8001c2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b88      	ldr	r3, [pc, #544]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a87      	ldr	r2, [pc, #540]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b85      	ldr	r3, [pc, #532]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2e:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <HAL_RCC_OscConfig+0x4c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d118      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3a:	4b7f      	ldr	r3, [pc, #508]	; (8001e38 <HAL_RCC_OscConfig+0x4c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a7e      	ldr	r2, [pc, #504]	; (8001e38 <HAL_RCC_OscConfig+0x4c8>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c46:	f7fe fe07 	bl	8000858 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4e:	f7fe fe03 	bl	8000858 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b64      	cmp	r3, #100	; 0x64
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e103      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b75      	ldr	r3, [pc, #468]	; (8001e38 <HAL_RCC_OscConfig+0x4c8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x312>
 8001c74:	4b6f      	ldr	r3, [pc, #444]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4a6e      	ldr	r2, [pc, #440]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6213      	str	r3, [r2, #32]
 8001c80:	e02d      	b.n	8001cde <HAL_RCC_OscConfig+0x36e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x334>
 8001c8a:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a69      	ldr	r2, [pc, #420]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a66      	ldr	r2, [pc, #408]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	e01c      	b.n	8001cde <HAL_RCC_OscConfig+0x36e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d10c      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x356>
 8001cac:	4b61      	ldr	r3, [pc, #388]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a60      	ldr	r2, [pc, #384]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	4b5e      	ldr	r3, [pc, #376]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a5d      	ldr	r2, [pc, #372]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	e00b      	b.n	8001cde <HAL_RCC_OscConfig+0x36e>
 8001cc6:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a5a      	ldr	r2, [pc, #360]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	4b58      	ldr	r3, [pc, #352]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a57      	ldr	r2, [pc, #348]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d015      	beq.n	8001d12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7fe fdb7 	bl	8000858 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7fe fdb3 	bl	8000858 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0b1      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0ee      	beq.n	8001cee <HAL_RCC_OscConfig+0x37e>
 8001d10:	e014      	b.n	8001d3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7fe fda1 	bl	8000858 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7fe fd9d 	bl	8000858 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e09b      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ee      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d105      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8087 	beq.w	8001e66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d061      	beq.n	8001e28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d146      	bne.n	8001dfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_RCC_OscConfig+0x4cc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7fe fd71 	bl	8000858 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe fd6d 	bl	8000858 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e06d      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d108      	bne.n	8001db4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4921      	ldr	r1, [pc, #132]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a19      	ldr	r1, [r3, #32]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	491b      	ldr	r1, [pc, #108]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_RCC_OscConfig+0x4cc>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fd41 	bl	8000858 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe fd3d 	bl	8000858 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e03d      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x46a>
 8001df8:	e035      	b.n	8001e66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_RCC_OscConfig+0x4cc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7fe fd2a 	bl	8000858 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe fd26 	bl	8000858 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e026      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x498>
 8001e26:	e01e      	b.n	8001e66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e019      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_OscConfig+0x500>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0d0      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d910      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 0207 	bic.w	r2, r3, #7
 8001e9e:	4965      	ldr	r1, [pc, #404]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b8      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ef2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	494d      	ldr	r1, [pc, #308]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d040      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d115      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e07f      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e073      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06b      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f52:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4936      	ldr	r1, [pc, #216]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f64:	f7fe fc78 	bl	8000858 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6c:	f7fe fc74 	bl	8000858 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e053      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 020c 	and.w	r2, r3, #12
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1eb      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d210      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	4922      	ldr	r1, [pc, #136]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e032      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4916      	ldr	r1, [pc, #88]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002002:	f000 f821 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002006:	4602      	mov	r2, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	490a      	ldr	r1, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8002014:	5ccb      	ldrb	r3, [r1, r3]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1cc>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1d0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fbd6 	bl	80007d4 <HAL_InitTick>

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40022000 	.word	0x40022000
 8002038:	40021000 	.word	0x40021000
 800203c:	08003180 	.word	0x08003180
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x30>
 8002072:	2b08      	cmp	r3, #8
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x36>
 8002076:	e027      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800207a:	613b      	str	r3, [r7, #16]
      break;
 800207c:	e027      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	0c9b      	lsrs	r3, r3, #18
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d010      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0c5b      	lsrs	r3, r3, #17
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020aa:	fb03 f202 	mul.w	r2, r3, r2
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e004      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	613b      	str	r3, [r7, #16]
      break;
 80020c6:	e002      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ca:	613b      	str	r3, [r7, #16]
      break;
 80020cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ce:	693b      	ldr	r3, [r7, #16]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	007a1200 	.word	0x007a1200
 80020e4:	08003198 	.word	0x08003198
 80020e8:	080031a8 	.word	0x080031a8
 80020ec:	003d0900 	.word	0x003d0900

080020f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f4:	4b02      	ldr	r3, [pc, #8]	; (8002100 <HAL_RCC_GetHCLKFreq+0x10>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000000 	.word	0x20000000

08002104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002108:	f7ff fff2 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 800210c:	4602      	mov	r2, r0
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4903      	ldr	r1, [pc, #12]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800211a:	5ccb      	ldrb	r3, [r1, r3]
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	08003190 	.word	0x08003190

0800212c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002130:	f7ff ffde 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	0adb      	lsrs	r3, r3, #11
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4903      	ldr	r1, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08003190 	.word	0x08003190

08002154 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <RCC_Delay+0x34>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <RCC_Delay+0x38>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0a5b      	lsrs	r3, r3, #9
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002170:	bf00      	nop
  }
  while (Delay --);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1e5a      	subs	r2, r3, #1
 8002176:	60fa      	str	r2, [r7, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f9      	bne.n	8002170 <RCC_Delay+0x1c>
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000000 	.word	0x20000000
 800218c:	10624dd3 	.word	0x10624dd3

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d07d      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b0:	4b4f      	ldr	r3, [pc, #316]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c6:	61d3      	str	r3, [r2, #28]
 80021c8:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d118      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e4:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a42      	ldr	r2, [pc, #264]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f0:	f7fe fb32 	bl	8000858 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	e008      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fb2e 	bl	8000858 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e06d      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d02e      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d027      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800224a:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d014      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fafd 	bl	8000858 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe faf9 	bl	8000858 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e036      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ee      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4917      	ldr	r1, [pc, #92]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	4313      	orrs	r3, r2
 8002294:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	490b      	ldr	r1, [pc, #44]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4904      	ldr	r1, [pc, #16]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42420440 	.word	0x42420440

080022fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b10      	cmp	r3, #16
 8002322:	f200 808a 	bhi.w	800243a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d045      	beq.n	80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d075      	beq.n	800241e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002332:	e082      	b.n	800243a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002334:	4b46      	ldr	r3, [pc, #280]	; (8002450 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800233a:	4b45      	ldr	r3, [pc, #276]	; (8002450 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d07b      	beq.n	800243e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	0c9b      	lsrs	r3, r3, #18
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4a41      	ldr	r2, [pc, #260]	; (8002454 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d015      	beq.n	800238a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0c5b      	lsrs	r3, r3, #17
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002378:	4a38      	ldr	r2, [pc, #224]	; (800245c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	e004      	b.n	8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4a34      	ldr	r2, [pc, #208]	; (8002460 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002394:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a0:	d102      	bne.n	80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	61bb      	str	r3, [r7, #24]
      break;
 80023a6:	e04a      	b.n	800243e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	085b      	lsrs	r3, r3, #1
 80023b4:	61bb      	str	r3, [r7, #24]
      break;
 80023b6:	e042      	b.n	800243e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c8:	d108      	bne.n	80023dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80023d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e01f      	b.n	800241c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e6:	d109      	bne.n	80023fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80023f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	e00f      	b.n	800241c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002406:	d11c      	bne.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d016      	beq.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002414:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002418:	61bb      	str	r3, [r7, #24]
      break;
 800241a:	e012      	b.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800241c:	e011      	b.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800241e:	f7ff fe85 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0b9b      	lsrs	r3, r3, #14
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	3301      	adds	r3, #1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	61bb      	str	r3, [r7, #24]
      break;
 8002438:	e004      	b.n	8002444 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800243a:	bf00      	nop
 800243c:	e002      	b.n	8002444 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002442:	bf00      	nop
    }
  }
  return (frequency);
 8002444:	69bb      	ldr	r3, [r7, #24]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	080031ac 	.word	0x080031ac
 8002458:	080031bc 	.word	0x080031bc
 800245c:	007a1200 	.word	0x007a1200
 8002460:	003d0900 	.word	0x003d0900
 8002464:	aaaaaaab 	.word	0xaaaaaaab

08002468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e042      	b.n	8002500 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe f8b4 	bl	80005fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f91d 	bl	80026ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b20      	cmp	r3, #32
 8002526:	d16d      	bne.n	8002604 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_UART_Transmit+0x2c>
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e066      	b.n	8002606 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002546:	f7fe f987 	bl	8000858 <HAL_GetTick>
 800254a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002560:	d108      	bne.n	8002574 <HAL_UART_Transmit+0x6c>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e003      	b.n	800257c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800257c:	e02a      	b.n	80025d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2200      	movs	r2, #0
 8002586:	2180      	movs	r1, #128	; 0x80
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f840 	bl	800260e <UART_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e036      	b.n	8002606 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10b      	bne.n	80025b6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	3302      	adds	r3, #2
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	e007      	b.n	80025c6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	3301      	adds	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1cf      	bne.n	800257e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2200      	movs	r2, #0
 80025e6:	2140      	movs	r1, #64	; 0x40
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f810 	bl	800260e <UART_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e006      	b.n	8002606 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b090      	sub	sp, #64	; 0x40
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800261e:	e050      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002626:	d04c      	beq.n	80026c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <UART_WaitOnFlagUntilTimeout+0x30>
 800262e:	f7fe f913 	bl	8000858 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800263a:	429a      	cmp	r2, r3
 800263c:	d241      	bcs.n	80026c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	e853 3f00 	ldrex	r3, [r3]
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330c      	adds	r3, #12
 800265c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800265e:	637a      	str	r2, [r7, #52]	; 0x34
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002666:	e841 2300 	strex	r3, r2, [r1]
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e5      	bne.n	800263e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3314      	adds	r3, #20
 8002678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	613b      	str	r3, [r7, #16]
   return(result);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	63bb      	str	r3, [r7, #56]	; 0x38
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3314      	adds	r3, #20
 8002690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002692:	623a      	str	r2, [r7, #32]
 8002694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002696:	69f9      	ldr	r1, [r7, #28]
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	e841 2300 	strex	r3, r2, [r1]
 800269e:	61bb      	str	r3, [r7, #24]
   return(result);
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1e5      	bne.n	8002672 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e00f      	b.n	80026e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d09f      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3740      	adds	r7, #64	; 0x40
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002726:	f023 030c 	bic.w	r3, r3, #12
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	430b      	orrs	r3, r1
 8002732:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2c      	ldr	r2, [pc, #176]	; (8002800 <UART_SetConfig+0x114>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d103      	bne.n	800275c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002754:	f7ff fcea 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	e002      	b.n	8002762 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800275c:	f7ff fcd2 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 8002760:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009a      	lsls	r2, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <UART_SetConfig+0x118>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	0119      	lsls	r1, r3, #4
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	009a      	lsls	r2, r3, #2
 800278c:	441a      	add	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	fbb2 f2f3 	udiv	r2, r2, r3
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <UART_SetConfig+0x118>)
 800279a:	fba3 0302 	umull	r0, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	fb00 f303 	mul.w	r3, r0, r3
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	3332      	adds	r3, #50	; 0x32
 80027ac:	4a15      	ldr	r2, [pc, #84]	; (8002804 <UART_SetConfig+0x118>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b8:	4419      	add	r1, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009a      	lsls	r2, r3, #2
 80027c4:	441a      	add	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <UART_SetConfig+0x118>)
 80027d2:	fba3 0302 	umull	r0, r3, r3, r2
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2064      	movs	r0, #100	; 0x64
 80027da:	fb00 f303 	mul.w	r3, r0, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <UART_SetConfig+0x118>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	f003 020f 	and.w	r2, r3, #15
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	440a      	add	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40013800 	.word	0x40013800
 8002804:	51eb851f 	.word	0x51eb851f

08002808 <__errno>:
 8002808:	4b01      	ldr	r3, [pc, #4]	; (8002810 <__errno+0x8>)
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	2000000c 	.word	0x2000000c

08002814 <__libc_init_array>:
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	2600      	movs	r6, #0
 8002818:	4d0c      	ldr	r5, [pc, #48]	; (800284c <__libc_init_array+0x38>)
 800281a:	4c0d      	ldr	r4, [pc, #52]	; (8002850 <__libc_init_array+0x3c>)
 800281c:	1b64      	subs	r4, r4, r5
 800281e:	10a4      	asrs	r4, r4, #2
 8002820:	42a6      	cmp	r6, r4
 8002822:	d109      	bne.n	8002838 <__libc_init_array+0x24>
 8002824:	f000 fc9c 	bl	8003160 <_init>
 8002828:	2600      	movs	r6, #0
 800282a:	4d0a      	ldr	r5, [pc, #40]	; (8002854 <__libc_init_array+0x40>)
 800282c:	4c0a      	ldr	r4, [pc, #40]	; (8002858 <__libc_init_array+0x44>)
 800282e:	1b64      	subs	r4, r4, r5
 8002830:	10a4      	asrs	r4, r4, #2
 8002832:	42a6      	cmp	r6, r4
 8002834:	d105      	bne.n	8002842 <__libc_init_array+0x2e>
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	f855 3b04 	ldr.w	r3, [r5], #4
 800283c:	4798      	blx	r3
 800283e:	3601      	adds	r6, #1
 8002840:	e7ee      	b.n	8002820 <__libc_init_array+0xc>
 8002842:	f855 3b04 	ldr.w	r3, [r5], #4
 8002846:	4798      	blx	r3
 8002848:	3601      	adds	r6, #1
 800284a:	e7f2      	b.n	8002832 <__libc_init_array+0x1e>
 800284c:	080031f4 	.word	0x080031f4
 8002850:	080031f4 	.word	0x080031f4
 8002854:	080031f4 	.word	0x080031f4
 8002858:	080031f8 	.word	0x080031f8

0800285c <memset>:
 800285c:	4603      	mov	r3, r0
 800285e:	4402      	add	r2, r0
 8002860:	4293      	cmp	r3, r2
 8002862:	d100      	bne.n	8002866 <memset+0xa>
 8002864:	4770      	bx	lr
 8002866:	f803 1b01 	strb.w	r1, [r3], #1
 800286a:	e7f9      	b.n	8002860 <memset+0x4>

0800286c <siprintf>:
 800286c:	b40e      	push	{r1, r2, r3}
 800286e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002872:	b500      	push	{lr}
 8002874:	b09c      	sub	sp, #112	; 0x70
 8002876:	ab1d      	add	r3, sp, #116	; 0x74
 8002878:	9002      	str	r0, [sp, #8]
 800287a:	9006      	str	r0, [sp, #24]
 800287c:	9107      	str	r1, [sp, #28]
 800287e:	9104      	str	r1, [sp, #16]
 8002880:	4808      	ldr	r0, [pc, #32]	; (80028a4 <siprintf+0x38>)
 8002882:	4909      	ldr	r1, [pc, #36]	; (80028a8 <siprintf+0x3c>)
 8002884:	f853 2b04 	ldr.w	r2, [r3], #4
 8002888:	9105      	str	r1, [sp, #20]
 800288a:	6800      	ldr	r0, [r0, #0]
 800288c:	a902      	add	r1, sp, #8
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	f000 f868 	bl	8002964 <_svfiprintf_r>
 8002894:	2200      	movs	r2, #0
 8002896:	9b02      	ldr	r3, [sp, #8]
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	b01c      	add	sp, #112	; 0x70
 800289c:	f85d eb04 	ldr.w	lr, [sp], #4
 80028a0:	b003      	add	sp, #12
 80028a2:	4770      	bx	lr
 80028a4:	2000000c 	.word	0x2000000c
 80028a8:	ffff0208 	.word	0xffff0208

080028ac <__ssputs_r>:
 80028ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	688e      	ldr	r6, [r1, #8]
 80028b2:	4682      	mov	sl, r0
 80028b4:	429e      	cmp	r6, r3
 80028b6:	460c      	mov	r4, r1
 80028b8:	4690      	mov	r8, r2
 80028ba:	461f      	mov	r7, r3
 80028bc:	d838      	bhi.n	8002930 <__ssputs_r+0x84>
 80028be:	898a      	ldrh	r2, [r1, #12]
 80028c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028c4:	d032      	beq.n	800292c <__ssputs_r+0x80>
 80028c6:	6825      	ldr	r5, [r4, #0]
 80028c8:	6909      	ldr	r1, [r1, #16]
 80028ca:	3301      	adds	r3, #1
 80028cc:	eba5 0901 	sub.w	r9, r5, r1
 80028d0:	6965      	ldr	r5, [r4, #20]
 80028d2:	444b      	add	r3, r9
 80028d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028dc:	106d      	asrs	r5, r5, #1
 80028de:	429d      	cmp	r5, r3
 80028e0:	bf38      	it	cc
 80028e2:	461d      	movcc	r5, r3
 80028e4:	0553      	lsls	r3, r2, #21
 80028e6:	d531      	bpl.n	800294c <__ssputs_r+0xa0>
 80028e8:	4629      	mov	r1, r5
 80028ea:	f000 fb6f 	bl	8002fcc <_malloc_r>
 80028ee:	4606      	mov	r6, r0
 80028f0:	b950      	cbnz	r0, 8002908 <__ssputs_r+0x5c>
 80028f2:	230c      	movs	r3, #12
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f8ca 3000 	str.w	r3, [sl]
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002908:	464a      	mov	r2, r9
 800290a:	6921      	ldr	r1, [r4, #16]
 800290c:	f000 face 	bl	8002eac <memcpy>
 8002910:	89a3      	ldrh	r3, [r4, #12]
 8002912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291a:	81a3      	strh	r3, [r4, #12]
 800291c:	6126      	str	r6, [r4, #16]
 800291e:	444e      	add	r6, r9
 8002920:	6026      	str	r6, [r4, #0]
 8002922:	463e      	mov	r6, r7
 8002924:	6165      	str	r5, [r4, #20]
 8002926:	eba5 0509 	sub.w	r5, r5, r9
 800292a:	60a5      	str	r5, [r4, #8]
 800292c:	42be      	cmp	r6, r7
 800292e:	d900      	bls.n	8002932 <__ssputs_r+0x86>
 8002930:	463e      	mov	r6, r7
 8002932:	4632      	mov	r2, r6
 8002934:	4641      	mov	r1, r8
 8002936:	6820      	ldr	r0, [r4, #0]
 8002938:	f000 fac6 	bl	8002ec8 <memmove>
 800293c:	68a3      	ldr	r3, [r4, #8]
 800293e:	2000      	movs	r0, #0
 8002940:	1b9b      	subs	r3, r3, r6
 8002942:	60a3      	str	r3, [r4, #8]
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	4433      	add	r3, r6
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	e7db      	b.n	8002904 <__ssputs_r+0x58>
 800294c:	462a      	mov	r2, r5
 800294e:	f000 fbb1 	bl	80030b4 <_realloc_r>
 8002952:	4606      	mov	r6, r0
 8002954:	2800      	cmp	r0, #0
 8002956:	d1e1      	bne.n	800291c <__ssputs_r+0x70>
 8002958:	4650      	mov	r0, sl
 800295a:	6921      	ldr	r1, [r4, #16]
 800295c:	f000 face 	bl	8002efc <_free_r>
 8002960:	e7c7      	b.n	80028f2 <__ssputs_r+0x46>
	...

08002964 <_svfiprintf_r>:
 8002964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002968:	4698      	mov	r8, r3
 800296a:	898b      	ldrh	r3, [r1, #12]
 800296c:	4607      	mov	r7, r0
 800296e:	061b      	lsls	r3, r3, #24
 8002970:	460d      	mov	r5, r1
 8002972:	4614      	mov	r4, r2
 8002974:	b09d      	sub	sp, #116	; 0x74
 8002976:	d50e      	bpl.n	8002996 <_svfiprintf_r+0x32>
 8002978:	690b      	ldr	r3, [r1, #16]
 800297a:	b963      	cbnz	r3, 8002996 <_svfiprintf_r+0x32>
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	f000 fb25 	bl	8002fcc <_malloc_r>
 8002982:	6028      	str	r0, [r5, #0]
 8002984:	6128      	str	r0, [r5, #16]
 8002986:	b920      	cbnz	r0, 8002992 <_svfiprintf_r+0x2e>
 8002988:	230c      	movs	r3, #12
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	e0d1      	b.n	8002b36 <_svfiprintf_r+0x1d2>
 8002992:	2340      	movs	r3, #64	; 0x40
 8002994:	616b      	str	r3, [r5, #20]
 8002996:	2300      	movs	r3, #0
 8002998:	9309      	str	r3, [sp, #36]	; 0x24
 800299a:	2320      	movs	r3, #32
 800299c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029a0:	2330      	movs	r3, #48	; 0x30
 80029a2:	f04f 0901 	mov.w	r9, #1
 80029a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80029aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002b50 <_svfiprintf_r+0x1ec>
 80029ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029b2:	4623      	mov	r3, r4
 80029b4:	469a      	mov	sl, r3
 80029b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029ba:	b10a      	cbz	r2, 80029c0 <_svfiprintf_r+0x5c>
 80029bc:	2a25      	cmp	r2, #37	; 0x25
 80029be:	d1f9      	bne.n	80029b4 <_svfiprintf_r+0x50>
 80029c0:	ebba 0b04 	subs.w	fp, sl, r4
 80029c4:	d00b      	beq.n	80029de <_svfiprintf_r+0x7a>
 80029c6:	465b      	mov	r3, fp
 80029c8:	4622      	mov	r2, r4
 80029ca:	4629      	mov	r1, r5
 80029cc:	4638      	mov	r0, r7
 80029ce:	f7ff ff6d 	bl	80028ac <__ssputs_r>
 80029d2:	3001      	adds	r0, #1
 80029d4:	f000 80aa 	beq.w	8002b2c <_svfiprintf_r+0x1c8>
 80029d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029da:	445a      	add	r2, fp
 80029dc:	9209      	str	r2, [sp, #36]	; 0x24
 80029de:	f89a 3000 	ldrb.w	r3, [sl]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80a2 	beq.w	8002b2c <_svfiprintf_r+0x1c8>
 80029e8:	2300      	movs	r3, #0
 80029ea:	f04f 32ff 	mov.w	r2, #4294967295
 80029ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029f2:	f10a 0a01 	add.w	sl, sl, #1
 80029f6:	9304      	str	r3, [sp, #16]
 80029f8:	9307      	str	r3, [sp, #28]
 80029fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029fe:	931a      	str	r3, [sp, #104]	; 0x68
 8002a00:	4654      	mov	r4, sl
 8002a02:	2205      	movs	r2, #5
 8002a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a08:	4851      	ldr	r0, [pc, #324]	; (8002b50 <_svfiprintf_r+0x1ec>)
 8002a0a:	f000 fa41 	bl	8002e90 <memchr>
 8002a0e:	9a04      	ldr	r2, [sp, #16]
 8002a10:	b9d8      	cbnz	r0, 8002a4a <_svfiprintf_r+0xe6>
 8002a12:	06d0      	lsls	r0, r2, #27
 8002a14:	bf44      	itt	mi
 8002a16:	2320      	movmi	r3, #32
 8002a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a1c:	0711      	lsls	r1, r2, #28
 8002a1e:	bf44      	itt	mi
 8002a20:	232b      	movmi	r3, #43	; 0x2b
 8002a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a26:	f89a 3000 	ldrb.w	r3, [sl]
 8002a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a2c:	d015      	beq.n	8002a5a <_svfiprintf_r+0xf6>
 8002a2e:	4654      	mov	r4, sl
 8002a30:	2000      	movs	r0, #0
 8002a32:	f04f 0c0a 	mov.w	ip, #10
 8002a36:	9a07      	ldr	r2, [sp, #28]
 8002a38:	4621      	mov	r1, r4
 8002a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a3e:	3b30      	subs	r3, #48	; 0x30
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d94e      	bls.n	8002ae2 <_svfiprintf_r+0x17e>
 8002a44:	b1b0      	cbz	r0, 8002a74 <_svfiprintf_r+0x110>
 8002a46:	9207      	str	r2, [sp, #28]
 8002a48:	e014      	b.n	8002a74 <_svfiprintf_r+0x110>
 8002a4a:	eba0 0308 	sub.w	r3, r0, r8
 8002a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	46a2      	mov	sl, r4
 8002a56:	9304      	str	r3, [sp, #16]
 8002a58:	e7d2      	b.n	8002a00 <_svfiprintf_r+0x9c>
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	1d19      	adds	r1, r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	9103      	str	r1, [sp, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bfbb      	ittet	lt
 8002a66:	425b      	neglt	r3, r3
 8002a68:	f042 0202 	orrlt.w	r2, r2, #2
 8002a6c:	9307      	strge	r3, [sp, #28]
 8002a6e:	9307      	strlt	r3, [sp, #28]
 8002a70:	bfb8      	it	lt
 8002a72:	9204      	strlt	r2, [sp, #16]
 8002a74:	7823      	ldrb	r3, [r4, #0]
 8002a76:	2b2e      	cmp	r3, #46	; 0x2e
 8002a78:	d10c      	bne.n	8002a94 <_svfiprintf_r+0x130>
 8002a7a:	7863      	ldrb	r3, [r4, #1]
 8002a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a7e:	d135      	bne.n	8002aec <_svfiprintf_r+0x188>
 8002a80:	9b03      	ldr	r3, [sp, #12]
 8002a82:	3402      	adds	r4, #2
 8002a84:	1d1a      	adds	r2, r3, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	9203      	str	r2, [sp, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bfb8      	it	lt
 8002a8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a92:	9305      	str	r3, [sp, #20]
 8002a94:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002b54 <_svfiprintf_r+0x1f0>
 8002a98:	2203      	movs	r2, #3
 8002a9a:	4650      	mov	r0, sl
 8002a9c:	7821      	ldrb	r1, [r4, #0]
 8002a9e:	f000 f9f7 	bl	8002e90 <memchr>
 8002aa2:	b140      	cbz	r0, 8002ab6 <_svfiprintf_r+0x152>
 8002aa4:	2340      	movs	r3, #64	; 0x40
 8002aa6:	eba0 000a 	sub.w	r0, r0, sl
 8002aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8002aae:	9b04      	ldr	r3, [sp, #16]
 8002ab0:	3401      	adds	r4, #1
 8002ab2:	4303      	orrs	r3, r0
 8002ab4:	9304      	str	r3, [sp, #16]
 8002ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aba:	2206      	movs	r2, #6
 8002abc:	4826      	ldr	r0, [pc, #152]	; (8002b58 <_svfiprintf_r+0x1f4>)
 8002abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ac2:	f000 f9e5 	bl	8002e90 <memchr>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d038      	beq.n	8002b3c <_svfiprintf_r+0x1d8>
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <_svfiprintf_r+0x1f8>)
 8002acc:	bb1b      	cbnz	r3, 8002b16 <_svfiprintf_r+0x1b2>
 8002ace:	9b03      	ldr	r3, [sp, #12]
 8002ad0:	3307      	adds	r3, #7
 8002ad2:	f023 0307 	bic.w	r3, r3, #7
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	9303      	str	r3, [sp, #12]
 8002ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002adc:	4433      	add	r3, r6
 8002ade:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae0:	e767      	b.n	80029b2 <_svfiprintf_r+0x4e>
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002aea:	e7a5      	b.n	8002a38 <_svfiprintf_r+0xd4>
 8002aec:	2300      	movs	r3, #0
 8002aee:	f04f 0c0a 	mov.w	ip, #10
 8002af2:	4619      	mov	r1, r3
 8002af4:	3401      	adds	r4, #1
 8002af6:	9305      	str	r3, [sp, #20]
 8002af8:	4620      	mov	r0, r4
 8002afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002afe:	3a30      	subs	r2, #48	; 0x30
 8002b00:	2a09      	cmp	r2, #9
 8002b02:	d903      	bls.n	8002b0c <_svfiprintf_r+0x1a8>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0c5      	beq.n	8002a94 <_svfiprintf_r+0x130>
 8002b08:	9105      	str	r1, [sp, #20]
 8002b0a:	e7c3      	b.n	8002a94 <_svfiprintf_r+0x130>
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	2301      	movs	r3, #1
 8002b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b14:	e7f0      	b.n	8002af8 <_svfiprintf_r+0x194>
 8002b16:	ab03      	add	r3, sp, #12
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	462a      	mov	r2, r5
 8002b1c:	4638      	mov	r0, r7
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <_svfiprintf_r+0x1fc>)
 8002b20:	a904      	add	r1, sp, #16
 8002b22:	f3af 8000 	nop.w
 8002b26:	1c42      	adds	r2, r0, #1
 8002b28:	4606      	mov	r6, r0
 8002b2a:	d1d6      	bne.n	8002ada <_svfiprintf_r+0x176>
 8002b2c:	89ab      	ldrh	r3, [r5, #12]
 8002b2e:	065b      	lsls	r3, r3, #25
 8002b30:	f53f af2c 	bmi.w	800298c <_svfiprintf_r+0x28>
 8002b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b36:	b01d      	add	sp, #116	; 0x74
 8002b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b3c:	ab03      	add	r3, sp, #12
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	462a      	mov	r2, r5
 8002b42:	4638      	mov	r0, r7
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <_svfiprintf_r+0x1fc>)
 8002b46:	a904      	add	r1, sp, #16
 8002b48:	f000 f87c 	bl	8002c44 <_printf_i>
 8002b4c:	e7eb      	b.n	8002b26 <_svfiprintf_r+0x1c2>
 8002b4e:	bf00      	nop
 8002b50:	080031be 	.word	0x080031be
 8002b54:	080031c4 	.word	0x080031c4
 8002b58:	080031c8 	.word	0x080031c8
 8002b5c:	00000000 	.word	0x00000000
 8002b60:	080028ad 	.word	0x080028ad

08002b64 <_printf_common>:
 8002b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b68:	4616      	mov	r6, r2
 8002b6a:	4699      	mov	r9, r3
 8002b6c:	688a      	ldr	r2, [r1, #8]
 8002b6e:	690b      	ldr	r3, [r1, #16]
 8002b70:	4607      	mov	r7, r0
 8002b72:	4293      	cmp	r3, r2
 8002b74:	bfb8      	it	lt
 8002b76:	4613      	movlt	r3, r2
 8002b78:	6033      	str	r3, [r6, #0]
 8002b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b7e:	460c      	mov	r4, r1
 8002b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b84:	b10a      	cbz	r2, 8002b8a <_printf_common+0x26>
 8002b86:	3301      	adds	r3, #1
 8002b88:	6033      	str	r3, [r6, #0]
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	0699      	lsls	r1, r3, #26
 8002b8e:	bf42      	ittt	mi
 8002b90:	6833      	ldrmi	r3, [r6, #0]
 8002b92:	3302      	addmi	r3, #2
 8002b94:	6033      	strmi	r3, [r6, #0]
 8002b96:	6825      	ldr	r5, [r4, #0]
 8002b98:	f015 0506 	ands.w	r5, r5, #6
 8002b9c:	d106      	bne.n	8002bac <_printf_common+0x48>
 8002b9e:	f104 0a19 	add.w	sl, r4, #25
 8002ba2:	68e3      	ldr	r3, [r4, #12]
 8002ba4:	6832      	ldr	r2, [r6, #0]
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	42ab      	cmp	r3, r5
 8002baa:	dc28      	bgt.n	8002bfe <_printf_common+0x9a>
 8002bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bb0:	1e13      	subs	r3, r2, #0
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	bf18      	it	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	0692      	lsls	r2, r2, #26
 8002bba:	d42d      	bmi.n	8002c18 <_printf_common+0xb4>
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bc4:	47c0      	blx	r8
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	d020      	beq.n	8002c0c <_printf_common+0xa8>
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	68e5      	ldr	r5, [r4, #12]
 8002bce:	f003 0306 	and.w	r3, r3, #6
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf18      	it	ne
 8002bd6:	2500      	movne	r5, #0
 8002bd8:	6832      	ldr	r2, [r6, #0]
 8002bda:	f04f 0600 	mov.w	r6, #0
 8002bde:	68a3      	ldr	r3, [r4, #8]
 8002be0:	bf08      	it	eq
 8002be2:	1aad      	subeq	r5, r5, r2
 8002be4:	6922      	ldr	r2, [r4, #16]
 8002be6:	bf08      	it	eq
 8002be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bfc4      	itt	gt
 8002bf0:	1a9b      	subgt	r3, r3, r2
 8002bf2:	18ed      	addgt	r5, r5, r3
 8002bf4:	341a      	adds	r4, #26
 8002bf6:	42b5      	cmp	r5, r6
 8002bf8:	d11a      	bne.n	8002c30 <_printf_common+0xcc>
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	e008      	b.n	8002c10 <_printf_common+0xac>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	4652      	mov	r2, sl
 8002c02:	4649      	mov	r1, r9
 8002c04:	4638      	mov	r0, r7
 8002c06:	47c0      	blx	r8
 8002c08:	3001      	adds	r0, #1
 8002c0a:	d103      	bne.n	8002c14 <_printf_common+0xb0>
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c14:	3501      	adds	r5, #1
 8002c16:	e7c4      	b.n	8002ba2 <_printf_common+0x3e>
 8002c18:	2030      	movs	r0, #48	; 0x30
 8002c1a:	18e1      	adds	r1, r4, r3
 8002c1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c26:	4422      	add	r2, r4
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c2e:	e7c5      	b.n	8002bbc <_printf_common+0x58>
 8002c30:	2301      	movs	r3, #1
 8002c32:	4622      	mov	r2, r4
 8002c34:	4649      	mov	r1, r9
 8002c36:	4638      	mov	r0, r7
 8002c38:	47c0      	blx	r8
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	d0e6      	beq.n	8002c0c <_printf_common+0xa8>
 8002c3e:	3601      	adds	r6, #1
 8002c40:	e7d9      	b.n	8002bf6 <_printf_common+0x92>
	...

08002c44 <_printf_i>:
 8002c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c48:	7e0f      	ldrb	r7, [r1, #24]
 8002c4a:	4691      	mov	r9, r2
 8002c4c:	2f78      	cmp	r7, #120	; 0x78
 8002c4e:	4680      	mov	r8, r0
 8002c50:	460c      	mov	r4, r1
 8002c52:	469a      	mov	sl, r3
 8002c54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c5a:	d807      	bhi.n	8002c6c <_printf_i+0x28>
 8002c5c:	2f62      	cmp	r7, #98	; 0x62
 8002c5e:	d80a      	bhi.n	8002c76 <_printf_i+0x32>
 8002c60:	2f00      	cmp	r7, #0
 8002c62:	f000 80d9 	beq.w	8002e18 <_printf_i+0x1d4>
 8002c66:	2f58      	cmp	r7, #88	; 0x58
 8002c68:	f000 80a4 	beq.w	8002db4 <_printf_i+0x170>
 8002c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c74:	e03a      	b.n	8002cec <_printf_i+0xa8>
 8002c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c7a:	2b15      	cmp	r3, #21
 8002c7c:	d8f6      	bhi.n	8002c6c <_printf_i+0x28>
 8002c7e:	a101      	add	r1, pc, #4	; (adr r1, 8002c84 <_printf_i+0x40>)
 8002c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c84:	08002cdd 	.word	0x08002cdd
 8002c88:	08002cf1 	.word	0x08002cf1
 8002c8c:	08002c6d 	.word	0x08002c6d
 8002c90:	08002c6d 	.word	0x08002c6d
 8002c94:	08002c6d 	.word	0x08002c6d
 8002c98:	08002c6d 	.word	0x08002c6d
 8002c9c:	08002cf1 	.word	0x08002cf1
 8002ca0:	08002c6d 	.word	0x08002c6d
 8002ca4:	08002c6d 	.word	0x08002c6d
 8002ca8:	08002c6d 	.word	0x08002c6d
 8002cac:	08002c6d 	.word	0x08002c6d
 8002cb0:	08002dff 	.word	0x08002dff
 8002cb4:	08002d21 	.word	0x08002d21
 8002cb8:	08002de1 	.word	0x08002de1
 8002cbc:	08002c6d 	.word	0x08002c6d
 8002cc0:	08002c6d 	.word	0x08002c6d
 8002cc4:	08002e21 	.word	0x08002e21
 8002cc8:	08002c6d 	.word	0x08002c6d
 8002ccc:	08002d21 	.word	0x08002d21
 8002cd0:	08002c6d 	.word	0x08002c6d
 8002cd4:	08002c6d 	.word	0x08002c6d
 8002cd8:	08002de9 	.word	0x08002de9
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	1d1a      	adds	r2, r3, #4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	602a      	str	r2, [r5, #0]
 8002ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0a4      	b.n	8002e3a <_printf_i+0x1f6>
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	6829      	ldr	r1, [r5, #0]
 8002cf4:	0606      	lsls	r6, r0, #24
 8002cf6:	f101 0304 	add.w	r3, r1, #4
 8002cfa:	d50a      	bpl.n	8002d12 <_printf_i+0xce>
 8002cfc:	680e      	ldr	r6, [r1, #0]
 8002cfe:	602b      	str	r3, [r5, #0]
 8002d00:	2e00      	cmp	r6, #0
 8002d02:	da03      	bge.n	8002d0c <_printf_i+0xc8>
 8002d04:	232d      	movs	r3, #45	; 0x2d
 8002d06:	4276      	negs	r6, r6
 8002d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d0c:	230a      	movs	r3, #10
 8002d0e:	485e      	ldr	r0, [pc, #376]	; (8002e88 <_printf_i+0x244>)
 8002d10:	e019      	b.n	8002d46 <_printf_i+0x102>
 8002d12:	680e      	ldr	r6, [r1, #0]
 8002d14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	bf18      	it	ne
 8002d1c:	b236      	sxthne	r6, r6
 8002d1e:	e7ef      	b.n	8002d00 <_printf_i+0xbc>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	1d19      	adds	r1, r3, #4
 8002d26:	6029      	str	r1, [r5, #0]
 8002d28:	0601      	lsls	r1, r0, #24
 8002d2a:	d501      	bpl.n	8002d30 <_printf_i+0xec>
 8002d2c:	681e      	ldr	r6, [r3, #0]
 8002d2e:	e002      	b.n	8002d36 <_printf_i+0xf2>
 8002d30:	0646      	lsls	r6, r0, #25
 8002d32:	d5fb      	bpl.n	8002d2c <_printf_i+0xe8>
 8002d34:	881e      	ldrh	r6, [r3, #0]
 8002d36:	2f6f      	cmp	r7, #111	; 0x6f
 8002d38:	bf0c      	ite	eq
 8002d3a:	2308      	moveq	r3, #8
 8002d3c:	230a      	movne	r3, #10
 8002d3e:	4852      	ldr	r0, [pc, #328]	; (8002e88 <_printf_i+0x244>)
 8002d40:	2100      	movs	r1, #0
 8002d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d46:	6865      	ldr	r5, [r4, #4]
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	bfa8      	it	ge
 8002d4c:	6821      	ldrge	r1, [r4, #0]
 8002d4e:	60a5      	str	r5, [r4, #8]
 8002d50:	bfa4      	itt	ge
 8002d52:	f021 0104 	bicge.w	r1, r1, #4
 8002d56:	6021      	strge	r1, [r4, #0]
 8002d58:	b90e      	cbnz	r6, 8002d5e <_printf_i+0x11a>
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	d04d      	beq.n	8002dfa <_printf_i+0x1b6>
 8002d5e:	4615      	mov	r5, r2
 8002d60:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d64:	fb03 6711 	mls	r7, r3, r1, r6
 8002d68:	5dc7      	ldrb	r7, [r0, r7]
 8002d6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d6e:	4637      	mov	r7, r6
 8002d70:	42bb      	cmp	r3, r7
 8002d72:	460e      	mov	r6, r1
 8002d74:	d9f4      	bls.n	8002d60 <_printf_i+0x11c>
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d10b      	bne.n	8002d92 <_printf_i+0x14e>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	07de      	lsls	r6, r3, #31
 8002d7e:	d508      	bpl.n	8002d92 <_printf_i+0x14e>
 8002d80:	6923      	ldr	r3, [r4, #16]
 8002d82:	6861      	ldr	r1, [r4, #4]
 8002d84:	4299      	cmp	r1, r3
 8002d86:	bfde      	ittt	le
 8002d88:	2330      	movle	r3, #48	; 0x30
 8002d8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d92:	1b52      	subs	r2, r2, r5
 8002d94:	6122      	str	r2, [r4, #16]
 8002d96:	464b      	mov	r3, r9
 8002d98:	4621      	mov	r1, r4
 8002d9a:	4640      	mov	r0, r8
 8002d9c:	f8cd a000 	str.w	sl, [sp]
 8002da0:	aa03      	add	r2, sp, #12
 8002da2:	f7ff fedf 	bl	8002b64 <_printf_common>
 8002da6:	3001      	adds	r0, #1
 8002da8:	d14c      	bne.n	8002e44 <_printf_i+0x200>
 8002daa:	f04f 30ff 	mov.w	r0, #4294967295
 8002dae:	b004      	add	sp, #16
 8002db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db4:	4834      	ldr	r0, [pc, #208]	; (8002e88 <_printf_i+0x244>)
 8002db6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002dba:	6829      	ldr	r1, [r5, #0]
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dc2:	6029      	str	r1, [r5, #0]
 8002dc4:	061d      	lsls	r5, r3, #24
 8002dc6:	d514      	bpl.n	8002df2 <_printf_i+0x1ae>
 8002dc8:	07df      	lsls	r7, r3, #31
 8002dca:	bf44      	itt	mi
 8002dcc:	f043 0320 	orrmi.w	r3, r3, #32
 8002dd0:	6023      	strmi	r3, [r4, #0]
 8002dd2:	b91e      	cbnz	r6, 8002ddc <_printf_i+0x198>
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	f023 0320 	bic.w	r3, r3, #32
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	2310      	movs	r3, #16
 8002dde:	e7af      	b.n	8002d40 <_printf_i+0xfc>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	f043 0320 	orr.w	r3, r3, #32
 8002de6:	6023      	str	r3, [r4, #0]
 8002de8:	2378      	movs	r3, #120	; 0x78
 8002dea:	4828      	ldr	r0, [pc, #160]	; (8002e8c <_printf_i+0x248>)
 8002dec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002df0:	e7e3      	b.n	8002dba <_printf_i+0x176>
 8002df2:	0659      	lsls	r1, r3, #25
 8002df4:	bf48      	it	mi
 8002df6:	b2b6      	uxthmi	r6, r6
 8002df8:	e7e6      	b.n	8002dc8 <_printf_i+0x184>
 8002dfa:	4615      	mov	r5, r2
 8002dfc:	e7bb      	b.n	8002d76 <_printf_i+0x132>
 8002dfe:	682b      	ldr	r3, [r5, #0]
 8002e00:	6826      	ldr	r6, [r4, #0]
 8002e02:	1d18      	adds	r0, r3, #4
 8002e04:	6961      	ldr	r1, [r4, #20]
 8002e06:	6028      	str	r0, [r5, #0]
 8002e08:	0635      	lsls	r5, r6, #24
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	d501      	bpl.n	8002e12 <_printf_i+0x1ce>
 8002e0e:	6019      	str	r1, [r3, #0]
 8002e10:	e002      	b.n	8002e18 <_printf_i+0x1d4>
 8002e12:	0670      	lsls	r0, r6, #25
 8002e14:	d5fb      	bpl.n	8002e0e <_printf_i+0x1ca>
 8002e16:	8019      	strh	r1, [r3, #0]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	4615      	mov	r5, r2
 8002e1c:	6123      	str	r3, [r4, #16]
 8002e1e:	e7ba      	b.n	8002d96 <_printf_i+0x152>
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	2100      	movs	r1, #0
 8002e24:	1d1a      	adds	r2, r3, #4
 8002e26:	602a      	str	r2, [r5, #0]
 8002e28:	681d      	ldr	r5, [r3, #0]
 8002e2a:	6862      	ldr	r2, [r4, #4]
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	f000 f82f 	bl	8002e90 <memchr>
 8002e32:	b108      	cbz	r0, 8002e38 <_printf_i+0x1f4>
 8002e34:	1b40      	subs	r0, r0, r5
 8002e36:	6060      	str	r0, [r4, #4]
 8002e38:	6863      	ldr	r3, [r4, #4]
 8002e3a:	6123      	str	r3, [r4, #16]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e42:	e7a8      	b.n	8002d96 <_printf_i+0x152>
 8002e44:	462a      	mov	r2, r5
 8002e46:	4649      	mov	r1, r9
 8002e48:	4640      	mov	r0, r8
 8002e4a:	6923      	ldr	r3, [r4, #16]
 8002e4c:	47d0      	blx	sl
 8002e4e:	3001      	adds	r0, #1
 8002e50:	d0ab      	beq.n	8002daa <_printf_i+0x166>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	079b      	lsls	r3, r3, #30
 8002e56:	d413      	bmi.n	8002e80 <_printf_i+0x23c>
 8002e58:	68e0      	ldr	r0, [r4, #12]
 8002e5a:	9b03      	ldr	r3, [sp, #12]
 8002e5c:	4298      	cmp	r0, r3
 8002e5e:	bfb8      	it	lt
 8002e60:	4618      	movlt	r0, r3
 8002e62:	e7a4      	b.n	8002dae <_printf_i+0x16a>
 8002e64:	2301      	movs	r3, #1
 8002e66:	4632      	mov	r2, r6
 8002e68:	4649      	mov	r1, r9
 8002e6a:	4640      	mov	r0, r8
 8002e6c:	47d0      	blx	sl
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d09b      	beq.n	8002daa <_printf_i+0x166>
 8002e72:	3501      	adds	r5, #1
 8002e74:	68e3      	ldr	r3, [r4, #12]
 8002e76:	9903      	ldr	r1, [sp, #12]
 8002e78:	1a5b      	subs	r3, r3, r1
 8002e7a:	42ab      	cmp	r3, r5
 8002e7c:	dcf2      	bgt.n	8002e64 <_printf_i+0x220>
 8002e7e:	e7eb      	b.n	8002e58 <_printf_i+0x214>
 8002e80:	2500      	movs	r5, #0
 8002e82:	f104 0619 	add.w	r6, r4, #25
 8002e86:	e7f5      	b.n	8002e74 <_printf_i+0x230>
 8002e88:	080031cf 	.word	0x080031cf
 8002e8c:	080031e0 	.word	0x080031e0

08002e90 <memchr>:
 8002e90:	4603      	mov	r3, r0
 8002e92:	b510      	push	{r4, lr}
 8002e94:	b2c9      	uxtb	r1, r1
 8002e96:	4402      	add	r2, r0
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	d101      	bne.n	8002ea2 <memchr+0x12>
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	e003      	b.n	8002eaa <memchr+0x1a>
 8002ea2:	7804      	ldrb	r4, [r0, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	428c      	cmp	r4, r1
 8002ea8:	d1f6      	bne.n	8002e98 <memchr+0x8>
 8002eaa:	bd10      	pop	{r4, pc}

08002eac <memcpy>:
 8002eac:	440a      	add	r2, r1
 8002eae:	4291      	cmp	r1, r2
 8002eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002eb4:	d100      	bne.n	8002eb8 <memcpy+0xc>
 8002eb6:	4770      	bx	lr
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ebe:	4291      	cmp	r1, r2
 8002ec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ec4:	d1f9      	bne.n	8002eba <memcpy+0xe>
 8002ec6:	bd10      	pop	{r4, pc}

08002ec8 <memmove>:
 8002ec8:	4288      	cmp	r0, r1
 8002eca:	b510      	push	{r4, lr}
 8002ecc:	eb01 0402 	add.w	r4, r1, r2
 8002ed0:	d902      	bls.n	8002ed8 <memmove+0x10>
 8002ed2:	4284      	cmp	r4, r0
 8002ed4:	4623      	mov	r3, r4
 8002ed6:	d807      	bhi.n	8002ee8 <memmove+0x20>
 8002ed8:	1e43      	subs	r3, r0, #1
 8002eda:	42a1      	cmp	r1, r4
 8002edc:	d008      	beq.n	8002ef0 <memmove+0x28>
 8002ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ee6:	e7f8      	b.n	8002eda <memmove+0x12>
 8002ee8:	4601      	mov	r1, r0
 8002eea:	4402      	add	r2, r0
 8002eec:	428a      	cmp	r2, r1
 8002eee:	d100      	bne.n	8002ef2 <memmove+0x2a>
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002efa:	e7f7      	b.n	8002eec <memmove+0x24>

08002efc <_free_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	4605      	mov	r5, r0
 8002f00:	2900      	cmp	r1, #0
 8002f02:	d040      	beq.n	8002f86 <_free_r+0x8a>
 8002f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f08:	1f0c      	subs	r4, r1, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfb8      	it	lt
 8002f0e:	18e4      	addlt	r4, r4, r3
 8002f10:	f000 f910 	bl	8003134 <__malloc_lock>
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <_free_r+0x8c>)
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	b933      	cbnz	r3, 8002f28 <_free_r+0x2c>
 8002f1a:	6063      	str	r3, [r4, #4]
 8002f1c:	6014      	str	r4, [r2, #0]
 8002f1e:	4628      	mov	r0, r5
 8002f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f24:	f000 b90c 	b.w	8003140 <__malloc_unlock>
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	d908      	bls.n	8002f3e <_free_r+0x42>
 8002f2c:	6820      	ldr	r0, [r4, #0]
 8002f2e:	1821      	adds	r1, r4, r0
 8002f30:	428b      	cmp	r3, r1
 8002f32:	bf01      	itttt	eq
 8002f34:	6819      	ldreq	r1, [r3, #0]
 8002f36:	685b      	ldreq	r3, [r3, #4]
 8002f38:	1809      	addeq	r1, r1, r0
 8002f3a:	6021      	streq	r1, [r4, #0]
 8002f3c:	e7ed      	b.n	8002f1a <_free_r+0x1e>
 8002f3e:	461a      	mov	r2, r3
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	b10b      	cbz	r3, 8002f48 <_free_r+0x4c>
 8002f44:	42a3      	cmp	r3, r4
 8002f46:	d9fa      	bls.n	8002f3e <_free_r+0x42>
 8002f48:	6811      	ldr	r1, [r2, #0]
 8002f4a:	1850      	adds	r0, r2, r1
 8002f4c:	42a0      	cmp	r0, r4
 8002f4e:	d10b      	bne.n	8002f68 <_free_r+0x6c>
 8002f50:	6820      	ldr	r0, [r4, #0]
 8002f52:	4401      	add	r1, r0
 8002f54:	1850      	adds	r0, r2, r1
 8002f56:	4283      	cmp	r3, r0
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	d1e0      	bne.n	8002f1e <_free_r+0x22>
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4401      	add	r1, r0
 8002f62:	6011      	str	r1, [r2, #0]
 8002f64:	6053      	str	r3, [r2, #4]
 8002f66:	e7da      	b.n	8002f1e <_free_r+0x22>
 8002f68:	d902      	bls.n	8002f70 <_free_r+0x74>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	602b      	str	r3, [r5, #0]
 8002f6e:	e7d6      	b.n	8002f1e <_free_r+0x22>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	1821      	adds	r1, r4, r0
 8002f74:	428b      	cmp	r3, r1
 8002f76:	bf01      	itttt	eq
 8002f78:	6819      	ldreq	r1, [r3, #0]
 8002f7a:	685b      	ldreq	r3, [r3, #4]
 8002f7c:	1809      	addeq	r1, r1, r0
 8002f7e:	6021      	streq	r1, [r4, #0]
 8002f80:	6063      	str	r3, [r4, #4]
 8002f82:	6054      	str	r4, [r2, #4]
 8002f84:	e7cb      	b.n	8002f1e <_free_r+0x22>
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	20000134 	.word	0x20000134

08002f8c <sbrk_aligned>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	4e0e      	ldr	r6, [pc, #56]	; (8002fc8 <sbrk_aligned+0x3c>)
 8002f90:	460c      	mov	r4, r1
 8002f92:	6831      	ldr	r1, [r6, #0]
 8002f94:	4605      	mov	r5, r0
 8002f96:	b911      	cbnz	r1, 8002f9e <sbrk_aligned+0x12>
 8002f98:	f000 f8bc 	bl	8003114 <_sbrk_r>
 8002f9c:	6030      	str	r0, [r6, #0]
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f000 f8b7 	bl	8003114 <_sbrk_r>
 8002fa6:	1c43      	adds	r3, r0, #1
 8002fa8:	d00a      	beq.n	8002fc0 <sbrk_aligned+0x34>
 8002faa:	1cc4      	adds	r4, r0, #3
 8002fac:	f024 0403 	bic.w	r4, r4, #3
 8002fb0:	42a0      	cmp	r0, r4
 8002fb2:	d007      	beq.n	8002fc4 <sbrk_aligned+0x38>
 8002fb4:	1a21      	subs	r1, r4, r0
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f000 f8ac 	bl	8003114 <_sbrk_r>
 8002fbc:	3001      	adds	r0, #1
 8002fbe:	d101      	bne.n	8002fc4 <sbrk_aligned+0x38>
 8002fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	20000138 	.word	0x20000138

08002fcc <_malloc_r>:
 8002fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd0:	1ccd      	adds	r5, r1, #3
 8002fd2:	f025 0503 	bic.w	r5, r5, #3
 8002fd6:	3508      	adds	r5, #8
 8002fd8:	2d0c      	cmp	r5, #12
 8002fda:	bf38      	it	cc
 8002fdc:	250c      	movcc	r5, #12
 8002fde:	2d00      	cmp	r5, #0
 8002fe0:	4607      	mov	r7, r0
 8002fe2:	db01      	blt.n	8002fe8 <_malloc_r+0x1c>
 8002fe4:	42a9      	cmp	r1, r5
 8002fe6:	d905      	bls.n	8002ff4 <_malloc_r+0x28>
 8002fe8:	230c      	movs	r3, #12
 8002fea:	2600      	movs	r6, #0
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4630      	mov	r0, r6
 8002ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ff4:	4e2e      	ldr	r6, [pc, #184]	; (80030b0 <_malloc_r+0xe4>)
 8002ff6:	f000 f89d 	bl	8003134 <__malloc_lock>
 8002ffa:	6833      	ldr	r3, [r6, #0]
 8002ffc:	461c      	mov	r4, r3
 8002ffe:	bb34      	cbnz	r4, 800304e <_malloc_r+0x82>
 8003000:	4629      	mov	r1, r5
 8003002:	4638      	mov	r0, r7
 8003004:	f7ff ffc2 	bl	8002f8c <sbrk_aligned>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	4604      	mov	r4, r0
 800300c:	d14d      	bne.n	80030aa <_malloc_r+0xde>
 800300e:	6834      	ldr	r4, [r6, #0]
 8003010:	4626      	mov	r6, r4
 8003012:	2e00      	cmp	r6, #0
 8003014:	d140      	bne.n	8003098 <_malloc_r+0xcc>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	4631      	mov	r1, r6
 800301a:	4638      	mov	r0, r7
 800301c:	eb04 0803 	add.w	r8, r4, r3
 8003020:	f000 f878 	bl	8003114 <_sbrk_r>
 8003024:	4580      	cmp	r8, r0
 8003026:	d13a      	bne.n	800309e <_malloc_r+0xd2>
 8003028:	6821      	ldr	r1, [r4, #0]
 800302a:	3503      	adds	r5, #3
 800302c:	1a6d      	subs	r5, r5, r1
 800302e:	f025 0503 	bic.w	r5, r5, #3
 8003032:	3508      	adds	r5, #8
 8003034:	2d0c      	cmp	r5, #12
 8003036:	bf38      	it	cc
 8003038:	250c      	movcc	r5, #12
 800303a:	4638      	mov	r0, r7
 800303c:	4629      	mov	r1, r5
 800303e:	f7ff ffa5 	bl	8002f8c <sbrk_aligned>
 8003042:	3001      	adds	r0, #1
 8003044:	d02b      	beq.n	800309e <_malloc_r+0xd2>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	442b      	add	r3, r5
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	e00e      	b.n	800306c <_malloc_r+0xa0>
 800304e:	6822      	ldr	r2, [r4, #0]
 8003050:	1b52      	subs	r2, r2, r5
 8003052:	d41e      	bmi.n	8003092 <_malloc_r+0xc6>
 8003054:	2a0b      	cmp	r2, #11
 8003056:	d916      	bls.n	8003086 <_malloc_r+0xba>
 8003058:	1961      	adds	r1, r4, r5
 800305a:	42a3      	cmp	r3, r4
 800305c:	6025      	str	r5, [r4, #0]
 800305e:	bf18      	it	ne
 8003060:	6059      	strne	r1, [r3, #4]
 8003062:	6863      	ldr	r3, [r4, #4]
 8003064:	bf08      	it	eq
 8003066:	6031      	streq	r1, [r6, #0]
 8003068:	5162      	str	r2, [r4, r5]
 800306a:	604b      	str	r3, [r1, #4]
 800306c:	4638      	mov	r0, r7
 800306e:	f104 060b 	add.w	r6, r4, #11
 8003072:	f000 f865 	bl	8003140 <__malloc_unlock>
 8003076:	f026 0607 	bic.w	r6, r6, #7
 800307a:	1d23      	adds	r3, r4, #4
 800307c:	1af2      	subs	r2, r6, r3
 800307e:	d0b6      	beq.n	8002fee <_malloc_r+0x22>
 8003080:	1b9b      	subs	r3, r3, r6
 8003082:	50a3      	str	r3, [r4, r2]
 8003084:	e7b3      	b.n	8002fee <_malloc_r+0x22>
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	42a3      	cmp	r3, r4
 800308a:	bf0c      	ite	eq
 800308c:	6032      	streq	r2, [r6, #0]
 800308e:	605a      	strne	r2, [r3, #4]
 8003090:	e7ec      	b.n	800306c <_malloc_r+0xa0>
 8003092:	4623      	mov	r3, r4
 8003094:	6864      	ldr	r4, [r4, #4]
 8003096:	e7b2      	b.n	8002ffe <_malloc_r+0x32>
 8003098:	4634      	mov	r4, r6
 800309a:	6876      	ldr	r6, [r6, #4]
 800309c:	e7b9      	b.n	8003012 <_malloc_r+0x46>
 800309e:	230c      	movs	r3, #12
 80030a0:	4638      	mov	r0, r7
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	f000 f84c 	bl	8003140 <__malloc_unlock>
 80030a8:	e7a1      	b.n	8002fee <_malloc_r+0x22>
 80030aa:	6025      	str	r5, [r4, #0]
 80030ac:	e7de      	b.n	800306c <_malloc_r+0xa0>
 80030ae:	bf00      	nop
 80030b0:	20000134 	.word	0x20000134

080030b4 <_realloc_r>:
 80030b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b8:	4680      	mov	r8, r0
 80030ba:	4614      	mov	r4, r2
 80030bc:	460e      	mov	r6, r1
 80030be:	b921      	cbnz	r1, 80030ca <_realloc_r+0x16>
 80030c0:	4611      	mov	r1, r2
 80030c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030c6:	f7ff bf81 	b.w	8002fcc <_malloc_r>
 80030ca:	b92a      	cbnz	r2, 80030d8 <_realloc_r+0x24>
 80030cc:	f7ff ff16 	bl	8002efc <_free_r>
 80030d0:	4625      	mov	r5, r4
 80030d2:	4628      	mov	r0, r5
 80030d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030d8:	f000 f838 	bl	800314c <_malloc_usable_size_r>
 80030dc:	4284      	cmp	r4, r0
 80030de:	4607      	mov	r7, r0
 80030e0:	d802      	bhi.n	80030e8 <_realloc_r+0x34>
 80030e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80030e6:	d812      	bhi.n	800310e <_realloc_r+0x5a>
 80030e8:	4621      	mov	r1, r4
 80030ea:	4640      	mov	r0, r8
 80030ec:	f7ff ff6e 	bl	8002fcc <_malloc_r>
 80030f0:	4605      	mov	r5, r0
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d0ed      	beq.n	80030d2 <_realloc_r+0x1e>
 80030f6:	42bc      	cmp	r4, r7
 80030f8:	4622      	mov	r2, r4
 80030fa:	4631      	mov	r1, r6
 80030fc:	bf28      	it	cs
 80030fe:	463a      	movcs	r2, r7
 8003100:	f7ff fed4 	bl	8002eac <memcpy>
 8003104:	4631      	mov	r1, r6
 8003106:	4640      	mov	r0, r8
 8003108:	f7ff fef8 	bl	8002efc <_free_r>
 800310c:	e7e1      	b.n	80030d2 <_realloc_r+0x1e>
 800310e:	4635      	mov	r5, r6
 8003110:	e7df      	b.n	80030d2 <_realloc_r+0x1e>
	...

08003114 <_sbrk_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	2300      	movs	r3, #0
 8003118:	4d05      	ldr	r5, [pc, #20]	; (8003130 <_sbrk_r+0x1c>)
 800311a:	4604      	mov	r4, r0
 800311c:	4608      	mov	r0, r1
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	f7fd fae0 	bl	80006e4 <_sbrk>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_sbrk_r+0x1a>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	b103      	cbz	r3, 800312e <_sbrk_r+0x1a>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	2000013c 	.word	0x2000013c

08003134 <__malloc_lock>:
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <__malloc_lock+0x8>)
 8003136:	f000 b811 	b.w	800315c <__retarget_lock_acquire_recursive>
 800313a:	bf00      	nop
 800313c:	20000140 	.word	0x20000140

08003140 <__malloc_unlock>:
 8003140:	4801      	ldr	r0, [pc, #4]	; (8003148 <__malloc_unlock+0x8>)
 8003142:	f000 b80c 	b.w	800315e <__retarget_lock_release_recursive>
 8003146:	bf00      	nop
 8003148:	20000140 	.word	0x20000140

0800314c <_malloc_usable_size_r>:
 800314c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003150:	1f18      	subs	r0, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	bfbc      	itt	lt
 8003156:	580b      	ldrlt	r3, [r1, r0]
 8003158:	18c0      	addlt	r0, r0, r3
 800315a:	4770      	bx	lr

0800315c <__retarget_lock_acquire_recursive>:
 800315c:	4770      	bx	lr

0800315e <__retarget_lock_release_recursive>:
 800315e:	4770      	bx	lr

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
